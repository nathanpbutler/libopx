name: Prerelease Binaries

on:
  push:
    tags:
      - 'v*-beta*'
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: prerelease
  cancel-in-progress: true

jobs:
  build-binaries:
    name: Build Matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x64
            extension: .exe
          - os: windows-latest
            runtime: win-arm64
            extension: .exe
          - os: ubuntu-latest
            runtime: linux-x64
            extension: ''
          - os: ubuntu-latest
            runtime: linux-arm64
            extension: ''
          - os: macos-latest
            runtime: osx-x64
            extension: ''
          - os: macos-latest
            runtime: osx-arm64
            extension: ''
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '9.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Publish (self-contained single-file)
        run: >-
          dotnet publish apps/opx/opx.csproj -c Release -r ${{ matrix.runtime }} --self-contained
          -p:PublishSingleFile=true -p:PublishReadyToRun=true -o ./publish

      - name: Create archive
        shell: bash
        run: |
          cd publish
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../opx-${{ matrix.runtime }}.zip opx${{ matrix.extension }} > /dev/null
          else
            tar -czf ../opx-${{ matrix.runtime }}.tar.gz opx${{ matrix.extension }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v5
        with:
          name: opx-${{ matrix.runtime }}
          path: |
            opx-${{ matrix.runtime }}.*
          retention-days: 5

  create-prerelease:
    name: Create Prerelease
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Extract changelog section
        id: changelog
        uses: mindsers/changelog-reader-action@v2
        with:
          path: ./CHANGELOG.md
          version: ${{ github.ref_name }}

      - name: Download artifacts
        uses: actions/download-artifact@v6
        with:
          path: ./artifacts

      - name: List downloaded files (debug)
        run: |
          find artifacts -type f -maxdepth 3 -print

      - name: Create / Update Prerelease
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          prerelease: true
          draft: false
          body: ${{ steps.changelog.outputs.changes }}
          files: |
            artifacts/opx-win-x64/opx-win-x64.zip
            artifacts/opx-win-arm64/opx-win-arm64.zip
            artifacts/opx-linux-x64/opx-linux-x64.tar.gz
            artifacts/opx-linux-arm64/opx-linux-arm64.tar.gz
            artifacts/opx-osx-x64/opx-osx-x64.tar.gz
            artifacts/opx-osx-arm64/opx-osx-arm64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup old beta releases (keep last 4)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          CURRENT_TAG="${{ github.ref_name }}"
          echo "Current beta release tag: $CURRENT_TAG"
          releases_json=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/releases?per_page=100")

          to_delete=$(echo "$releases_json" | jq -r --arg cur "$CURRENT_TAG" '
            [ .[] | select(.tag_name | test("^v.*-beta")) | select(.tag_name != $cur) | {id, created_at} ]
            | sort_by(.created_at)
            | (length - 4 | if . < 0 then 0 else . end) as $extra
            | .[0:$extra] | .[].id')

          if [[ -z "$to_delete" ]]; then
            echo "No old prereleases to delete."; exit 0
          fi

          echo "Deleting old prerelease IDs: $to_delete"
          while read -r rid; do
            [[ -z "$rid" ]] && continue
            curl -s -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$rid" || true
          done <<< "$to_delete"

          echo "$to_delete" | while read -r rid; do
            tag=$(echo "$releases_json" | jq -r --arg id "$rid" '.[] | select(.id==($id|tonumber)) | .tag_name')
            if [[ -n "$tag" ]]; then
              curl -s -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$tag" || true
            fi
          done
