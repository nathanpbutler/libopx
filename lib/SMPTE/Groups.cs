namespace nathanbutlerDEV.libopx.SMPTE;

/// <summary>
/// Contains SMPTE group definitions and descriptors for MXF metadata organization.
/// This class provides group identifiers and structures used for organizing SMPTE metadata sets.
/// </summary>
public class Groups
{
    /// <summary>
    /// AAC SubDescriptor
    /// </summary>
    /// <remarks>
    /// Advanced Audio Coding SubDescriptor
    /// </remarks>
    private static readonly byte[] AACSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x78, 0x00];
    /// <summary>
    /// AAF Association
    /// </summary>
    /// <remarks>
    /// Metadata registered by the AAF Association for public use
    /// </remarks>
    private static readonly byte[] AAFAssociation = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// AAF Association Structural Metadata
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] AAFAssociationStructuralMetadata = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// AAF Version 1.x Classes
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] AAFVersion1XClasses = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Abstract Object
    /// </summary>
    /// <remarks>
    /// Abstract Object
    /// </remarks>
    private static readonly byte[] AbstractObject = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x7F, 0x00];
    /// <summary>
    /// Access Control
    /// </summary>
    /// <remarks>
    /// Details of permitted access to the media product
    /// </remarks>
    private static readonly byte[] AccessControl = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// ACES Picture SubDescriptor
    /// </summary>
    /// <remarks>
    /// ACES Picture SubDescriptor
    /// </remarks>
    private static readonly byte[] ACESPictureSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x79, 0x00];
    /// <summary>
    /// Acquisition
    /// </summary>
    /// <remarks>
    /// Metadata sets associated with a video camera
    /// </remarks>
    private static readonly byte[] Acquisition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Ad-ID
    /// </summary>
    /// <remarks>
    /// Metadata registered by Ad-ID, LLC for public use
    /// </remarks>
    private static readonly byte[] Ad_ID = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Address Set
    /// </summary>
    /// <remarks>
    /// Address Set
    /// Namespace: http://www.smpte-ra.org/reg/395/2014/13/1/aaf
    /// </remarks>
    private static readonly byte[] Address_aaf = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x1B, 0x01, 0x00];
    /// <summary>
    /// Address
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// Namespace: http://www.ebu.ch/metadata/schemas/ebucore/smpte/class13/group
    /// </remarks>
    private static readonly byte[] Address_group = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x26, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Adjust Secure Time Request
    /// </summary>
    /// <remarks>
    /// Adjust Secure Time Request
    /// </remarks>
    private static readonly byte[] AdjustSecureTimeRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Adjust Secure Time Response
    /// </summary>
    /// <remarks>
    /// Adjust Secure Time Response
    /// </remarks>
    private static readonly byte[] AdjustSecureTimeResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x05, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// ADMINISTRATION
    /// </summary>
    /// <remarks>
    /// Administration and business related metadata groups
    /// </remarks>
    private static readonly byte[] ADMINISTRATION = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Administrative Base Class
    /// </summary>
    /// <remarks>
    /// Administrative Base Class
    /// </remarks>
    private static readonly byte[] AdministrativeBaseClass = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00];
    /// <summary>
    /// AES
    /// </summary>
    /// <remarks>
    /// Metadata registered by the Audio Engineering Society for public use
    /// </remarks>
    private static readonly byte[] AES = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// AES3 PCM Descriptor
    /// </summary>
    /// <remarks>
    /// AES3 PCM Descriptor
    /// </remarks>
    private static readonly byte[] AES3PCMDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x47, 0x00];
    /// <summary>
    /// Affiliation
    /// </summary>
    /// <remarks>
    /// To define an affiliation.
    /// </remarks>
    private static readonly byte[] affiliation = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x6E, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// AIFC Descriptor
    /// </summary>
    /// <remarks>
    /// AIFC Descriptor
    /// </remarks>
    private static readonly byte[] AIFCDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x26, 0x00];
    /// <summary>
    /// Alternative Title
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] alternativeTitle = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// AMIA
    /// </summary>
    /// <remarks>
    /// Metadata registered by the Association of Moving Image Archivists for public use
    /// </remarks>
    private static readonly byte[] AMIA = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// AMWA Application Specifications
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] AMWAApplicationSpecifications = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// AMWA Rules Based Specifications
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] AMWARulesBasedSpecifications = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// ANC Data Descriptor
    /// </summary>
    /// <remarks>
    /// ANC Data Descriptor
    /// </remarks>
    private static readonly byte[] ANCDataDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x5C, 0x00];
    /// <summary>
    /// Ancillary Data
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] ancillaryData = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x38, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// APP Descriptive Frameworks
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] APP_DescriptiveFrameworks = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x04, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00];
    /// <summary>
    /// APP DigiBeta Dropout Framework
    /// </summary>
    /// <remarks>
    /// APP DigiBeta Dropout Framework
    /// </remarks>
    private static readonly byte[] APP_DigiBetaDropoutFramework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x04, 0x01, 0x01, 0x01, 0x04, 0x00, 0x00];
    /// <summary>
    /// APP Infax Framework
    /// </summary>
    /// <remarks>
    /// APP Infax Framework
    /// </remarks>
    private static readonly byte[] APP_InfaxFramework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x04, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00];
    /// <summary>
    /// APP PSE Analysis Framework
    /// </summary>
    /// <remarks>
    /// APP PSE Analysis Framework
    /// </remarks>
    private static readonly byte[] APP_PSEAnalysisFramework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x04, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00];
    /// <summary>
    /// APP Timecode Break Framework
    /// </summary>
    /// <remarks>
    /// APP Timecode Break Framework
    /// </remarks>
    private static readonly byte[] APP_TimecodeBreakFramework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x04, 0x01, 0x01, 0x01, 0x05, 0x00, 0x00];
    /// <summary>
    /// APP VTR Replay Error Framework
    /// </summary>
    /// <remarks>
    /// APP VTR Replay Error Framework
    /// </remarks>
    private static readonly byte[] APP_VTRReplayErrorFramework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x04, 0x01, 0x01, 0x01, 0x03, 0x00, 0x00];
    /// <summary>
    /// Apple Inc.
    /// </summary>
    /// <remarks>
    /// Metadata registered by Apple Inc. for private use
    /// </remarks>
    private static readonly byte[] Apple_Inc = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Application Object
    /// </summary>
    /// <remarks>
    /// Application Object
    /// </remarks>
    private static readonly byte[] ApplicationObject = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x66, 0x00];
    /// <summary>
    /// Application Plug-In Object
    /// </summary>
    /// <remarks>
    /// Application Plug-In Object
    /// </remarks>
    private static readonly byte[] ApplicationPlugInObject = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x61, 0x00];
    /// <summary>
    /// Application Referenced Object
    /// </summary>
    /// <remarks>
    /// Application Referenced Object
    /// </remarks>
    private static readonly byte[] ApplicationReferencedObject = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x62, 0x00];
    /// <summary>
    /// Application Specifications Common
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] ApplicationSpecificationsCommon = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x07, 0x01, 0x01, 0x00, 0x00, 0x00];
    /// <summary>
    /// Application Specifications Version 1
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] ApplicationSpecificationsVersion1 = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Archive Preservation Project
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] ArchivePreservationProject = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Archive Preservation Project Version 1
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] ArchivePreservationProjectVersion1 = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// ARIB
    /// </summary>
    /// <remarks>
    /// Metadata registered by the Association of Radio Industries and Businesses (Japan) for public use
    /// </remarks>
    private static readonly byte[] ARIB = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// ARRI
    /// </summary>
    /// <remarks>
    /// Metadata registered by Arnold & Richter Cine Technik GmbH for private use
    /// </remarks>
    private static readonly byte[] ARRI = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// AS_07
    /// </summary>
    /// <remarks>
    /// AS-07 Archiving and Preservation Format
    /// </remarks>
    private static readonly byte[] AS_07 = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x07, 0x01, 0x07, 0x00, 0x00, 0x00];
    /// <summary>
    /// AS_07_Core_DMS_Framework
    /// </summary>
    /// <remarks>
    /// AS-07 Descriptive Metadata
    /// </remarks>
    private static readonly byte[] AS_07_Core_DMS_Framework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0E, 0x01, 0x01, 0x07, 0x01, 0x01, 0x00];
    /// <summary>
    /// AS_07_DMS_Device
    /// </summary>
    /// <remarks>
    /// Description of a device used to capture or create the content
    /// </remarks>
    private static readonly byte[] AS_07_DMS_Device = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0E, 0x01, 0x01, 0x07, 0x01, 0x02, 0x00];
    /// <summary>
    /// AS_07_DMS_Groups
    /// </summary>
    /// <remarks>
    /// AS-07 Archiving and Preservation Format Descriptive Metadata Groups
    /// </remarks>
    private static readonly byte[] AS_07_DMS_Groups = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0E, 0x01, 0x01, 0x07, 0x01, 0x00, 0x00];
    /// <summary>
    /// AS_07_DMS_Identifier
    /// </summary>
    /// <remarks>
    /// Description of a file or part identifier in an AS-07 file
    /// </remarks>
    private static readonly byte[] AS_07_DMS_Identifier = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0E, 0x01, 0x01, 0x07, 0x01, 0x03, 0x00];
    /// <summary>
    /// AS_07_Groups
    /// </summary>
    /// <remarks>
    /// AS-07 Archiving and Preservation Format Groups
    /// </remarks>
    private static readonly byte[] AS_07_Groups = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x0E, 0x0D, 0x0E, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00];
    /// <summary>
    /// AS_07_GSP_BD_DMS_Framework
    /// </summary>
    /// <remarks>
    /// Binary Data GSP Object Group
    /// </remarks>
    private static readonly byte[] AS_07_GSP_BD_DMS_Framework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0E, 0x01, 0x01, 0x07, 0x02, 0x02, 0x00];
    /// <summary>
    /// AS_07_GSP_DMS_Framework
    /// </summary>
    /// <remarks>
    /// Abstract GSP Object Group
    /// </remarks>
    private static readonly byte[] AS_07_GSP_DMS_Framework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0E, 0x01, 0x01, 0x07, 0x02, 0x01, 0x00];
    /// <summary>
    /// AS_07_GSP_DMS_Object
    /// </summary>
    /// <remarks>
    /// Additional GSP descriptive information for AS-07
    /// </remarks>
    private static readonly byte[] AS_07_GSP_DMS_Object = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0E, 0x01, 0x01, 0x07, 0x01, 0x04, 0x00];
    /// <summary>
    /// AS_07_GSP_Groups
    /// </summary>
    /// <remarks>
    /// AS-07 Archiving and Preservation Format Generic Stream Partition Groups
    /// </remarks>
    private static readonly byte[] AS_07_GSP_Groups = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0E, 0x01, 0x01, 0x07, 0x02, 0x00, 0x00];
    /// <summary>
    /// AS_07_GSP_TD_DMS_Framework
    /// </summary>
    /// <remarks>
    /// Text Data GSP Object Group
    /// </remarks>
    private static readonly byte[] AS_07_GSP_TD_DMS_Framework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0E, 0x01, 0x01, 0x07, 0x02, 0x03, 0x00];
    /// <summary>
    /// AS_07_Segmentation_DMS_Framework
    /// </summary>
    /// <remarks>
    /// Metadata for AS-07 files that segment essence data
    /// </remarks>
    private static readonly byte[] AS_07_Segmentation_DMS_Framework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0E, 0x01, 0x01, 0x07, 0x03, 0x01, 0x00];
    /// <summary>
    /// AS_07_Segmentation_Groups
    /// </summary>
    /// <remarks>
    /// AS-07 Archiving and Preservation Format SegmentationGroups
    /// </remarks>
    private static readonly byte[] AS_07_Segmentation_Groups = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0E, 0x01, 0x01, 0x07, 0x03, 0x00, 0x00];
    /// <summary>
    /// AS_07_Timecode_Groups
    /// </summary>
    /// <remarks>
    /// AS-07 Archiving and Preservation Format Timecode Groups
    /// </remarks>
    private static readonly byte[] AS_07_Timecode_Groups = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0E, 0x01, 0x01, 0x07, 0x04, 0x00, 0x00];
    /// <summary>
    /// AS_07_TimecodeLabelSubdescriptor
    /// </summary>
    /// <remarks>
    /// Timecode Label for AS-07 files
    /// </remarks>
    private static readonly byte[] AS_07_TimecodeLabelSubdescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0E, 0x01, 0x01, 0x07, 0x04, 0x01, 0x00];
    /// <summary>
    /// AS-10
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] AS_10 = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x07, 0x01, 0x0A, 0x00, 0x00, 0x00];
    /// <summary>
    /// AS-11
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] AS_11 = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x07, 0x01, 0x0B, 0x00, 0x00, 0x00];
    /// <summary>
    /// AS-12
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] AS_12 = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x07, 0x01, 0x0C, 0x00, 0x00, 0x00];
    /// <summary>
    /// AS_12_DescriptiveObject
    /// </summary>
    /// <remarks>
    /// AS_12 Commercial Distribution Slate Metadata
    /// </remarks>
    private static readonly byte[] AS_12_DescriptiveObject = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x07, 0x01, 0x0C, 0x01, 0x02, 0x00];
    /// <summary>
    /// ASC
    /// </summary>
    /// <remarks>
    /// Metadata registered by the American Society of Cinematographers for public use
    /// </remarks>
    private static readonly byte[] ASC = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Ascent Media Group, Inc.
    /// </summary>
    /// <remarks>
    /// Metadata registered by Ascent Media Group, Inc. for private use
    /// </remarks>
    private static readonly byte[] AscentMediaGroupInc = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// ASPA
    /// </summary>
    /// <remarks>
    /// Unclassified metadata registered by MISB (Motion Imagery Standards Board) for ASPA
    /// </remarks>
    private static readonly byte[] ASPA = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Aspect Ratio
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] aspectRatio = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audience
    /// </summary>
    /// <remarks>
    /// To describe an audience.
    /// </remarks>
    private static readonly byte[] audience = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x5D, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Block Divergence
    /// </summary>
    /// <remarks>
    /// To define the divergence of an audio object.
    /// </remarks>
    private static readonly byte[] audioBlockDivergence = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x68, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Block Format
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] audioBlockFormat = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x51, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Block Jump Position
    /// </summary>
    /// <remarks>
    /// To define a jump position of an audio object.
    /// </remarks>
    private static readonly byte[] audioBlockJumpPosition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x6B, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Block Matrix
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] audioBlockMatrix = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x57, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Block Matrix Coefficient
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] audioBlockMatrixCoefficient = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x52, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Block Position
    /// </summary>
    /// <remarks>
    /// To define the position of an audio object.
    /// </remarks>
    private static readonly byte[] audioBlockPosition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x67, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Block Zone
    /// </summary>
    /// <remarks>
    /// To define a zone of an audio object.
    /// </remarks>
    private static readonly byte[] audioBlockZone = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x6A, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Block Zone Exclusion
    /// </summary>
    /// <remarks>
    /// To define the exclusion zone of an audio object.
    /// </remarks>
    private static readonly byte[] audioBlockZoneExclusion = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x69, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Channel Format
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] audioChannelFormat = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x50, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Channel Label Sub-Descriptor
    /// </summary>
    /// <remarks>
    /// Audio Channel Label Sub-Descriptor
    /// </remarks>
    private static readonly byte[] AudioChannelLabelSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x6B, 0x00];
    /// <summary>
    /// Audio Content
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] audioContent = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x4D, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Content Dialogue
    /// </summary>
    /// <remarks>
    /// To define an audio content dialogue.
    /// </remarks>
    private static readonly byte[] audioContentDialogue = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x63, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Format
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] audioFormat = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x33, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Format Extended
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] audioFormatExtended = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x49, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Metadata
    /// </summary>
    /// <remarks>
    /// Audio Metadata
    /// </remarks>
    private static readonly byte[] AudioMetadata = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Metadata Pack
    /// </summary>
    /// <remarks>
    /// Audio Metadata Pack
    /// </remarks>
    private static readonly byte[] AudioMetadataPack = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio MXF Lookup
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] audioMXFLookup = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x56, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Object
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] audioObject = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x4E, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Content Interaction
    /// </summary>
    /// <remarks>
    /// To define the interaction parameters of an audio object.
    /// </remarks>
    private static readonly byte[] audioObjectInteraction = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x64, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Pack Format
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] audioPackFormat = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x4F, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Programme
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] audioProgramme = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x4A, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Stream Format
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] audioStreamFormat = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x53, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Track Format
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] audioTrackFormat = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x54, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Audio Track UID
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] audioTrackUID = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x55, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Auditorium Security
    /// </summary>
    /// <remarks>
    /// Security-critical groups for intra-theater use
    /// </remarks>
    private static readonly byte[] AuditoriumSecurity = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Aux Data Block
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] AuxDataBlock = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Aux Data Block Transfer Header
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] AuxDataBlockTransferHeader = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Aux Data Essence Descriptor
    /// </summary>
    /// <remarks>
    /// Aux Data Essence Descriptor
    /// </remarks>
    private static readonly byte[] AuxDataEssenceDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x73, 0x00];
    /// <summary>
    /// Aux Data Transfer Protocol
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] AuxDataTransferProtocol = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Auxiliary Descriptor
    /// </summary>
    /// <remarks>
    /// Auxiliary Descriptor
    /// </remarks>
    private static readonly byte[] AuxiliaryDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x4E, 0x00];
    /// <summary>
    /// AVC Sub-Descriptor
    /// </summary>
    /// <remarks>
    /// AVC Sub-Descriptor
    /// </remarks>
    private static readonly byte[] AVCSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x6E, 0x00];
    /// <summary>
    /// Avid Technology, Inc.
    /// </summary>
    /// <remarks>
    /// Metadata registered by Avid Technology, Inc. for private use
    /// </remarks>
    private static readonly byte[] AvidTechnologyInc = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Award Set
    /// </summary>
    /// <remarks>
    /// Award Set
    /// Namespace: http://www.smpte-ra.org/reg/395/2014/13/1/aaf
    /// </remarks>
    private static readonly byte[] Award_aaf = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x15, 0x01, 0x00];
    /// <summary>
    /// Award
    /// </summary>
    /// <remarks>
    /// To define an award.
    /// Namespace: http://www.ebu.ch/metadata/schemas/ebucore/smpte/class13/group
    /// </remarks>
    private static readonly byte[] Award_group = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x6D, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Bad Request Response
    /// </summary>
    /// <remarks>
    /// Bad request response
    /// </remarks>
    private static readonly byte[] BadRequestResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00];
    /// <summary>
    /// Barco
    /// </summary>
    /// <remarks>
    /// Metadata registered by Barco, Inc. for private use
    /// </remarks>
    private static readonly byte[] Barco = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Basic Link
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] basicLink = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x2F, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// basicRelation
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] basicRelation = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x2B, 0x02, 0x00, 0x00, 0x00];
    /// <summary>
    /// BBC
    /// </summary>
    /// <remarks>
    /// Metadata registered by the British Broadcasting Corporation for public use
    /// </remarks>
    private static readonly byte[] BBC = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Body Partition Closed Complete
    /// </summary>
    /// <remarks>
    /// Body Partition Closed Complete
    /// </remarks>
    private static readonly byte[] BodyPartitionClosedComplete = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x03, 0x04, 0x00];
    /// <summary>
    /// Body Partition Closed Incomplete
    /// </summary>
    /// <remarks>
    /// Body Partition Closed Incomplete
    /// </remarks>
    private static readonly byte[] BodyPartitionClosedIncomplete = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x03, 0x02, 0x00];
    /// <summary>
    /// Body Partition Open Complete
    /// </summary>
    /// <remarks>
    /// Body Partition Open Complete
    /// </remarks>
    private static readonly byte[] BodyPartitionOpenComplete = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x03, 0x03, 0x00];
    /// <summary>
    /// Body Partition Open Incomplete
    /// </summary>
    /// <remarks>
    /// Body Partition Open Incomplete
    /// </remarks>
    private static readonly byte[] BodyPartitionOpenIncomplete = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x03, 0x01, 0x00];
    /// <summary>
    /// Body Partition Pack
    /// </summary>
    /// <remarks>
    /// Body Partition Pack
    /// </remarks>
    private static readonly byte[] BodyPartitionPack = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x03, 0x00, 0x00];
    /// <summary>
    /// Branding Set
    /// </summary>
    /// <remarks>
    /// Branding Set
    /// </remarks>
    private static readonly byte[] Branding = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x13, 0x01, 0x00];
    /// <summary>
    /// BWF Import Descriptor
    /// </summary>
    /// <remarks>
    /// BWF Import Descriptor
    /// </remarks>
    private static readonly byte[] BWFImportDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x50, 0x00];
    /// <summary>
    /// Camera Unit Acquisition Metadata
    /// </summary>
    /// <remarks>
    /// Camera Unit Acquisition Metadata
    /// </remarks>
    private static readonly byte[] CameraUnitAcquisitionMetadata = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00];
    /// <summary>
    /// Cancel CPLProcessed Log Report Request
    /// </summary>
    /// <remarks>
    /// Cancel CPLProcessed Log Report Request
    /// </remarks>
    private static readonly byte[] CancelCPLProcessedLogReportRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x22, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Cancel CPLProcessed Log Report Response
    /// </summary>
    /// <remarks>
    /// Cancel CPLProcessed Log Report Response
    /// </remarks>
    private static readonly byte[] CancelCPLProcessedLogReportResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x23, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Cancel Security Log Report Request
    /// </summary>
    /// <remarks>
    /// Cancel Security Log Report Request
    /// </remarks>
    private static readonly byte[] CancelSecurityLogReportRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x1C, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Cancel Security Log Report Response
    /// </summary>
    /// <remarks>
    /// Cancel Security Log Report Response
    /// </remarks>
    private static readonly byte[] CancelSecurityLogReportResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x1D, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Canon, Inc.
    /// </summary>
    /// <remarks>
    /// Metadata registered by Canon, Inc for private use
    /// </remarks>
    private static readonly byte[] CanonInc = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Captioning
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] captioning = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x36, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Captions Description Set
    /// </summary>
    /// <remarks>
    /// Captions Description Set
    /// </remarks>
    private static readonly byte[] CaptionsDescription = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x16, 0x01, 0x00];
    /// <summary>
    /// CDCI Descriptor
    /// </summary>
    /// <remarks>
    /// CDCI Descriptor
    /// </remarks>
    private static readonly byte[] CDCIDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x28, 0x00];
    /// <summary>
    /// Class
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] Class = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00];
    /// <summary>
    /// Class Definition
    /// </summary>
    /// <remarks>
    /// Class Definition
    /// </remarks>
    private static readonly byte[] ClassDefinition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00];
    /// <summary>
    /// Classification Set
    /// </summary>
    /// <remarks>
    /// Classification Set
    /// </remarks>
    private static readonly byte[] Classification = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x17, 0x04, 0x00];
    /// <summary>
    /// Clip Framework
    /// </summary>
    /// <remarks>
    /// Clip Framework
    /// </remarks>
    private static readonly byte[] ClipFramework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x01, 0x02, 0x00];
    /// <summary>
    /// CNN
    /// </summary>
    /// <remarks>
    /// Metadata registered by CNN for private use
    /// </remarks>
    private static readonly byte[] CNN = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Codec
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] codec = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x3E, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Codec Definition
    /// </summary>
    /// <remarks>
    /// Codec Definition
    /// </remarks>
    private static readonly byte[] CodecDefinition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x1F, 0x00];
    /// <summary>
    /// Color Transform Packs
    /// </summary>
    /// <remarks>
    /// Color Transform Metadata Packs for Serial Interfaces
    /// </remarks>
    private static readonly byte[] ColorTransformPacks = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x05, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Color Transform Sets
    /// </summary>
    /// <remarks>
    /// Color Transform Sets
    /// </remarks>
    private static readonly byte[] ColorTransformSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x05, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Comment Marker
    /// </summary>
    /// <remarks>
    /// Comment Marker
    /// </remarks>
    private static readonly byte[] CommentMarker = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x08, 0x00];
    /// <summary>
    /// Communications Set
    /// </summary>
    /// <remarks>
    /// Communications Set
    /// </remarks>
    private static readonly byte[] Communications = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x1B, 0x02, 0x00];
    /// <summary>
    /// Component
    /// </summary>
    /// <remarks>
    /// Component
    /// </remarks>
    private static readonly byte[] Component = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00];
    /// <summary>
    /// Composition Package
    /// </summary>
    /// <remarks>
    /// Composition Package
    /// </remarks>
    private static readonly byte[] CompositionPackage = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x35, 0x00];
    /// <summary>
    /// COMPOUND
    /// </summary>
    /// <remarks>
    /// Compound metadata groups
    /// </remarks>
    private static readonly byte[] COMPOUND = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Compound Entry Element Base Class
    /// </summary>
    /// <remarks>
    /// Compound Entry Element Base Class
    /// </remarks>
    private static readonly byte[] CompoundEntryElementBaseClass = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00];
    /// <summary>
    /// Compound Name
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] compoundName = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x28, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Compression Definition
    /// </summary>
    /// <remarks>
    /// Compression Definition
    /// </remarks>
    private static readonly byte[] CompressionDefinition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x7E, 0x00];
    /// <summary>
    /// Constant Value
    /// </summary>
    /// <remarks>
    /// Constant Value
    /// </remarks>
    private static readonly byte[] ConstantValue = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x3D, 0x00];
    /// <summary>
    /// Contact
    /// </summary>
    /// <remarks>
    /// Contact
    /// Namespace: http://www.smpte-ra.org/reg/395/2014/13/1/aaf
    /// </remarks>
    private static readonly byte[] Contact_aaf = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x7F, 0x1A, 0x00];
    /// <summary>
    /// Contact
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// Namespace: http://www.ebu.ch/metadata/schemas/ebucore/smpte/class13/group
    /// </remarks>
    private static readonly byte[] Contact_group = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x22, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Contacts List Set
    /// </summary>
    /// <remarks>
    /// Contacts List Set
    /// </remarks>
    private static readonly byte[] ContactsList = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x19, 0x01, 0x00];
    /// <summary>
    /// Container Constraints Sub-Descriptor
    /// </summary>
    /// <remarks>
    /// Container Constraints Sub-Descriptor
    /// </remarks>
    private static readonly byte[] ContainerConstraintsSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x67, 0x00];
    /// <summary>
    /// Container Definition
    /// </summary>
    /// <remarks>
    /// Container Definition
    /// </remarks>
    private static readonly byte[] ContainerDefinition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x20, 0x00];
    /// <summary>
    /// Container Format
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] containerFormat = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x48, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Content Storage
    /// </summary>
    /// <remarks>
    /// Content Storage
    /// </remarks>
    private static readonly byte[] ContentStorage = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x18, 0x00];
    /// <summary>
    /// Contract Set
    /// </summary>
    /// <remarks>
    /// Contract Set
    /// </remarks>
    private static readonly byte[] Contract = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x1C, 0x01, 0x00];
    /// <summary>
    /// Control Point
    /// </summary>
    /// <remarks>
    /// Control Point
    /// </remarks>
    private static readonly byte[] ControlPoint = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x19, 0x00];
    /// <summary>
    /// Coordinates
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] coordinates = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x16, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Core Metadata
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] coreMetadata = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Country Type
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] countryType = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x2A, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Coverage
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] coverage = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Cryptographic Context
    /// </summary>
    /// <remarks>
    /// Cryptographic Context
    /// </remarks>
    private static readonly byte[] CryptographicContext = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x02, 0x02, 0x00, 0x00];
    /// <summary>
    /// Cryptographic Framework
    /// </summary>
    /// <remarks>
    /// Cryptographic Framework
    /// </remarks>
    private static readonly byte[] CryptographicFramework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x02, 0x01, 0x00, 0x00];
    /// <summary>
    /// Cue Words Set
    /// </summary>
    /// <remarks>
    /// Cue Words Set
    /// </remarks>
    private static readonly byte[] CueWords = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x17, 0x08, 0x00];
    /// <summary>
    /// Custom Relation
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] customRelation = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x2B, 0x01, 0x00, 0x00, 0x00];
    /// <summary>
    /// D-BOX Technologies
    /// </summary>
    /// <remarks>
    /// Metadata registered by D-BOX Technologies for private use
    /// </remarks>
    private static readonly byte[] D_BOXTechnologies = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Data Definition
    /// </summary>
    /// <remarks>
    /// Data Definition
    /// </remarks>
    private static readonly byte[] DataDefinition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x1B, 0x00];
    /// <summary>
    /// Data Essence Descriptor
    /// </summary>
    /// <remarks>
    /// Data Essence Descriptor
    /// </remarks>
    private static readonly byte[] DataEssenceDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x43, 0x00];
    /// <summary>
    /// Data Format
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] dataFormat = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x35, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Data Models
    /// </summary>
    /// <remarks>
    /// Data Models
    /// </remarks>
    private static readonly byte[] DataModels = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Data Sets
    /// </summary>
    /// <remarks>
    /// Data Sets
    /// </remarks>
    private static readonly byte[] DataSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Data Stream Device SubDescriptor
    /// </summary>
    /// <remarks>
    /// Defines a Data Stream Device SubDescriptor
    /// </remarks>
    private static readonly byte[] DataStreamDeviceSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x81, 0x0C];
    /// <summary>
    /// Data Stream SubDescriptor
    /// </summary>
    /// <remarks>
    /// Defines an Data Stream SubDescriptor
    /// </remarks>
    private static readonly byte[] DataStreamSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x81, 0x0B];
    /// <summary>
    /// Date
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] date = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Date Time Descriptor
    /// </summary>
    /// <remarks>
    /// Date Time Descriptor
    /// </remarks>
    private static readonly byte[] DateTimeDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x46, 0x00];
    /// <summary>
    /// Date Type
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] dateType = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x0D, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// DC PCM Sound Descriptor
    /// </summary>
    /// <remarks>
    /// DC PCM Sound Descriptor
    /// </remarks>
    private static readonly byte[] DCPCMSoundDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x5D, 0x00];
    /// <summary>
    /// DC Timed Text Descriptor
    /// </summary>
    /// <remarks>
    /// DC Timed Text Descriptor
    /// </remarks>
    private static readonly byte[] DCTimedTextDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x64, 0x00];
    /// <summary>
    /// DC Timed Text Resource Sub-Descriptor
    /// </summary>
    /// <remarks>
    /// DC Timed Text Resource Sub-Descriptor
    /// </remarks>
    private static readonly byte[] DCTimedTextResourceSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x65, 0x00];
    /// <summary>
    /// Definition Object
    /// </summary>
    /// <remarks>
    /// Definition Object
    /// </remarks>
    private static readonly byte[] DefinitionObject = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x1A, 0x00];
    /// <summary>
    /// Department
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] department = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x24, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Description
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] description = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x09, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Descriptive Clip
    /// </summary>
    /// <remarks>
    /// Descriptive Clip
    /// </remarks>
    private static readonly byte[] DescriptiveClip = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x45, 0x00];
    /// <summary>
    /// Descriptive Framework
    /// </summary>
    /// <remarks>
    /// Descriptive Framework
    /// </remarks>
    private static readonly byte[] DescriptiveFramework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Descriptive Marker
    /// </summary>
    /// <remarks>
    /// Descriptive Marker
    /// </remarks>
    private static readonly byte[] DescriptiveMarker = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x41, 0x00];
    /// <summary>
    /// Descriptive Object
    /// </summary>
    /// <remarks>
    /// Descriptive Object
    /// </remarks>
    private static readonly byte[] DescriptiveObject = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Details
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] details = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x25, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Device Parameters Set
    /// </summary>
    /// <remarks>
    /// Device Parameters Set
    /// </remarks>
    private static readonly byte[] DeviceParameters = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x1E, 0x01, 0x00];
    /// <summary>
    /// Dictionary
    /// </summary>
    /// <remarks>
    /// Dictionary
    /// </remarks>
    private static readonly byte[] Dictionary = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x22, 0x00];
    /// <summary>
    /// Dictionary Representation
    /// </summary>
    /// <remarks>
    /// Dictionary Representation
    /// </remarks>
    private static readonly byte[] DictionaryRepresentation = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Dimension
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] dimension = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x3B, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// AS-11 Core
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] DM_AS_11_Core = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x07, 0x01, 0x0B, 0x01, 0x00, 0x00];
    /// <summary>
    /// DM_AS_11_Core_Framework
    /// </summary>
    /// <remarks>
    /// AS-11 core metadata framework
    /// </remarks>
    private static readonly byte[] DM_AS_11_Core_Framework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x07, 0x01, 0x0B, 0x01, 0x01, 0x00];
    /// <summary>
    /// AS-11 Segmentation
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] DM_AS_11_Segmentation = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x07, 0x01, 0x0B, 0x02, 0x00, 0x00];
    /// <summary>
    /// DM_AS_11_Segmentation_Framework
    /// </summary>
    /// <remarks>
    /// AS-11 segmentation metadata framework
    /// </remarks>
    private static readonly byte[] DM_AS_11_Segmentation_Framework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x07, 0x01, 0x0B, 0x02, 0x01, 0x00];
    /// <summary>
    /// AS-11 UKDPP
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] DM_AS_11_UKDPP = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0C, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// DM_AS_11_UKDPP_Framework
    /// </summary>
    /// <remarks>
    /// AS-11 UK DPP metadata framework
    /// </remarks>
    private static readonly byte[] DM_AS_11_UKDPP_Framework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0C, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00];
    /// <summary>
    /// DM_Segmentation_Framework
    /// </summary>
    /// <remarks>
    /// Segmentation metadata framework
    /// </remarks>
    private static readonly byte[] DM_Segmentation_Framework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x07, 0x01, 0x01, 0x01, 0x01, 0x00];
    /// <summary>
    /// DMCVT App1 Set
    /// </summary>
    /// <remarks>
    /// Identifies a DMCVT Application 1 Set
    /// </remarks>
    private static readonly byte[] DMCVTApp1Set = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x05, 0x31, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// DMCVT App2 Set
    /// </summary>
    /// <remarks>
    /// Identifies a DMCVT Application 2 Set
    /// </remarks>
    private static readonly byte[] DMCVTApp2Set = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x05, 0x31, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// DMCVT App3 Set
    /// </summary>
    /// <remarks>
    /// Identifies a DMCVT Application 3 Set
    /// </remarks>
    private static readonly byte[] DMCVTApp3Set = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x05, 0x31, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// DMCVT App4 Set
    /// </summary>
    /// <remarks>
    /// Identifies a DMCVT Application 4 Set
    /// </remarks>
    private static readonly byte[] DMCVTApp4Set = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x05, 0x31, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// DMCVT Application Sets
    /// </summary>
    /// <remarks>
    /// DMCVT Application Sets
    /// </remarks>
    private static readonly byte[] DMCVTApplicationSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x05, 0x31, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// DMCVT Generic Set 1
    /// </summary>
    /// <remarks>
    /// Identifies a DMCVT Generic Set 1
    /// </remarks>
    private static readonly byte[] DMCVTGenericSet1 = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x05, 0x31, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// DMCVT Generic Sets
    /// </summary>
    /// <remarks>
    /// DMCVT Generic Sets
    /// </remarks>
    private static readonly byte[] DMCVTGenericSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x05, 0x31, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// DMCVT Target SubDescriptor
    /// </summary>
    /// <remarks>
    /// Identifies a DMCVT Target SubDescriptor
    /// </remarks>
    private static readonly byte[] DMCVTTargetSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x75, 0x00];
    /// <summary>
    /// DMS AS-03
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] DMS_AS_03 = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x03, 0x00, 0x00, 0x00];
    /// <summary>
    /// DMS AS-03 Framework
    /// </summary>
    /// <remarks>
    /// AS_03 Descriptive Metadata
    /// </remarks>
    private static readonly byte[] DMS_AS_03_Framework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x03, 0x01, 0x00, 0x00];
    /// <summary>
    /// DMS AS-10 Core
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] DMS_AS_10_Core = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x07, 0x01, 0x0A, 0x01, 0x00, 0x00];
    /// <summary>
    /// DMS AS-10 Core Framework
    /// </summary>
    /// <remarks>
    /// AS-10 Metadata Framework set
    /// </remarks>
    private static readonly byte[] DMS_AS_10_Core_Framework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x07, 0x01, 0x0A, 0x01, 0x01, 0x00];
    /// <summary>
    /// DMS_AS_12
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] DMS_AS_12 = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x07, 0x01, 0x0C, 0x01, 0x00, 0x00];
    /// <summary>
    /// DMS_AS_12_AdID_Slate
    /// </summary>
    /// <remarks>
    /// AS_12 Ad-ID advertisement identification metadata framework
    /// </remarks>
    private static readonly byte[] DMS_AS_12_AdID_Slate = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x0D, 0x0D, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// DMS_AS_12_Framework
    /// </summary>
    /// <remarks>
    /// AS_12 content provider independent metadata framework
    /// </remarks>
    private static readonly byte[] DMS_AS_12_Framework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x07, 0x01, 0x0C, 0x01, 0x01, 0x00];
    /// <summary>
    /// DMS-1 Abstract Sets
    /// </summary>
    /// <remarks>
    /// DMS-1 Abstract Sets
    /// </remarks>
    private static readonly byte[] DMS1AbstractSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x7F, 0x00, 0x00];
    /// <summary>
    /// Annotation Set
    /// </summary>
    /// <remarks>
    /// Annotation Set
    /// </remarks>
    private static readonly byte[] DMS1Annotation = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x17, 0x01, 0x00];
    /// <summary>
    /// DMS-1 Awards Sets
    /// </summary>
    /// <remarks>
    /// DMS-1 Awards Sets
    /// </remarks>
    private static readonly byte[] DMS1AwardsSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x15, 0x00, 0x00];
    /// <summary>
    /// DMS-1 Branding Sets
    /// </summary>
    /// <remarks>
    /// DMS-1 Branding Sets
    /// </remarks>
    private static readonly byte[] DMS1BrandingSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x13, 0x00, 0x00];
    /// <summary>
    /// DMS-1 Captions Sets
    /// </summary>
    /// <remarks>
    /// DMS-1 Captions Sets
    /// </remarks>
    private static readonly byte[] DMS1CaptionsSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x16, 0x00, 0x00];
    /// <summary>
    /// DMS-1 Contact Collections
    /// </summary>
    /// <remarks>
    /// DMS-1 Contact Collections
    /// </remarks>
    private static readonly byte[] DMS1ContactCollections = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x19, 0x00, 0x00];
    /// <summary>
    /// DMS-1 Contact Information Sets
    /// </summary>
    /// <remarks>
    /// DMS-1 Contact Information Sets
    /// </remarks>
    private static readonly byte[] DMS1ContactInformationSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x1B, 0x00, 0x00];
    /// <summary>
    /// DMS-1 Contact Sets
    /// </summary>
    /// <remarks>
    /// DMS-1 Contact Sets
    /// </remarks>
    private static readonly byte[] DMS1ContactSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x1A, 0x00, 0x00];
    /// <summary>
    /// DMS-1 Descriptive Metadata Scheme
    /// </summary>
    /// <remarks>
    /// DMS-1 Descriptive Metadata Scheme
    /// </remarks>
    private static readonly byte[] DMS1DescriptiveMetadataScheme = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00];
    /// <summary>
    /// Event Set
    /// </summary>
    /// <remarks>
    /// Event Set
    /// </remarks>
    private static readonly byte[] DMS1Event = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x14, 0x01, 0x00];
    /// <summary>
    /// DMS-1 Format Sets
    /// </summary>
    /// <remarks>
    /// DMS-1 Format Sets
    /// </remarks>
    private static readonly byte[] DMS1FormatSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x1D, 0x00, 0x00];
    /// <summary>
    /// DMS-1 Framework
    /// </summary>
    /// <remarks>
    /// DMS-1 Framework
    /// </remarks>
    private static readonly byte[] DMS1Framework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x7F, 0x01, 0x00];
    /// <summary>
    /// DMS-1 Frameworks
    /// </summary>
    /// <remarks>
    /// DMS-1 Frameworks
    /// </remarks>
    private static readonly byte[] DMS1Frameworks = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x01, 0x00, 0x00];
    /// <summary>
    /// Identification Set
    /// </summary>
    /// <remarks>
    /// Identification Set
    /// </remarks>
    private static readonly byte[] DMS1Identification = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x11, 0x01, 0x00];
    /// <summary>
    /// DMS-1 Identification Sets
    /// </summary>
    /// <remarks>
    /// DMS-1 Identification Sets
    /// </remarks>
    private static readonly byte[] DMS1IdentificationSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x11, 0x00, 0x00];
    /// <summary>
    /// DMS-1 Interpretive Sets
    /// </summary>
    /// <remarks>
    /// DMS-1 Interpretive Sets
    /// </remarks>
    private static readonly byte[] DMS1InterpretiveSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x17, 0x00, 0x00];
    /// <summary>
    /// DMS-1 Name-Value Sets
    /// </summary>
    /// <remarks>
    /// DMS-1 Name-Value Sets
    /// </remarks>
    private static readonly byte[] DMS1NameValueSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x1F, 0x00, 0x00];
    /// <summary>
    /// DMS-1 Set
    /// </summary>
    /// <remarks>
    /// DMS-1 Set
    /// </remarks>
    private static readonly byte[] DMS1Object = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x7F, 0x10, 0x00];
    /// <summary>
    /// DMS-1 Parametric Sets
    /// </summary>
    /// <remarks>
    /// DMS-1 Parametric Sets
    /// </remarks>
    private static readonly byte[] DMS1ParametricSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x1E, 0x00, 0x00];
    /// <summary>
    /// DMS-1 Project Sets
    /// </summary>
    /// <remarks>
    /// DMS-1 Project Sets
    /// </remarks>
    private static readonly byte[] DMS1ProjectSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x20, 0x00, 0x00];
    /// <summary>
    /// DMS-1 Publication Sets
    /// </summary>
    /// <remarks>
    /// DMS-1 Publication Sets
    /// </remarks>
    private static readonly byte[] DMS1PublicationSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x14, 0x00, 0x00];
    /// <summary>
    /// DMS-1 Relationship Sets
    /// </summary>
    /// <remarks>
    /// DMS-1 Relationship Sets
    /// </remarks>
    private static readonly byte[] DMS1RelationshipSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x12, 0x00, 0x00];
    /// <summary>
    /// DMS-1 Rights Sets
    /// </summary>
    /// <remarks>
    /// DMS-1 Rights Sets
    /// </remarks>
    private static readonly byte[] DMS1RightsSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x1C, 0x00, 0x00];
    /// <summary>
    /// DMS-1 Role Sets
    /// </summary>
    /// <remarks>
    /// DMS-1 Role Sets
    /// </remarks>
    private static readonly byte[] DMS1RoleSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x18, 0x00, 0x00];
    /// <summary>
    /// DMS-1 Title Sets
    /// </summary>
    /// <remarks>
    /// DMS-1 Title Sets
    /// </remarks>
    private static readonly byte[] DMS1TitleSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x10, 0x00, 0x00];
    /// <summary>
    /// DMS-Crypto Descriptive Sets
    /// </summary>
    /// <remarks>
    /// DMS-Crypto Descriptive Sets
    /// </remarks>
    private static readonly byte[] DMSCryptoDescriptiveSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x02, 0x00, 0x00, 0x00];
    /// <summary>
    /// Dolby Laboratories Inc.
    /// </summary>
    /// <remarks>
    /// Metadata registered by Dolby Laboratories Inc. for private use
    /// </remarks>
    private static readonly byte[] DolbyLaboratories_Inc = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Doremi Labs, Inc.
    /// </summary>
    /// <remarks>
    /// Metadata registered by Doremi Labs, Inc. for private use
    /// </remarks>
    private static readonly byte[] DoremiLabsInc = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// DPP
    /// </summary>
    /// <remarks>
    /// Metadata registered by the UK Digital Production Partnership for public use
    /// </remarks>
    private static readonly byte[] DPP = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// DPP Groups
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] DPP_Groups = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0C, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00];
    /// <summary>
    /// DPP Schemes
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] DPP_Schemes = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// DTS, Inc.
    /// </summary>
    /// <remarks>
    /// Metadata registered by DTS, Inc. for private use
    /// </remarks>
    private static readonly byte[] DTS = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Dutch Guild
    /// </summary>
    /// <remarks>
    /// Metadata registered by the Dutch Guild for public use
    /// </remarks>
    private static readonly byte[] DutchGuild = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Dynamic Clip
    /// </summary>
    /// <remarks>
    /// Dynamic Clip
    /// </remarks>
    private static readonly byte[] DynamicClip = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x58, 0x00];
    /// <summary>
    /// Dynamic Marker
    /// </summary>
    /// <remarks>
    /// Dynamic Marker
    /// </remarks>
    private static readonly byte[] DynamicMarker = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x57, 0x00];
    /// <summary>
    /// EBU/UER
    /// </summary>
    /// <remarks>
    /// Metadata registered by the EBU for public use
    /// </remarks>
    private static readonly byte[] EBU_UER = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// ebucore
    /// </summary>
    /// <remarks>
    /// EBUCore DM_Framework
    /// </remarks>
    private static readonly byte[] EBUCore = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// EBU Core Main Framework
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] EBUCoreMainFramework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// EBU Core Object
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] EBUCoreObject = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x5C, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Edge Code
    /// </summary>
    /// <remarks>
    /// Edge Code
    /// </remarks>
    private static readonly byte[] EdgeCode = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x04, 0x00];
    /// <summary>
    /// EIDR Descriptive Metadata Scheme
    /// </summary>
    /// <remarks>
    /// EIDR Descriptive Metadata Scheme
    /// </remarks>
    private static readonly byte[] EIDRDescriptiveMetadataScheme = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x05, 0x00, 0x00, 0x00];
    /// <summary>
    /// EIDR Framework
    /// </summary>
    /// <remarks>
    /// EIDR Descriptive Metadata Framework
    /// </remarks>
    private static readonly byte[] EIDRFramework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x05, 0x01, 0x00, 0x00];
    /// <summary>
    /// EncryptedEssence
    /// </summary>
    /// <remarks>
    /// EncryptedEssence
    /// </remarks>
    private static readonly byte[] EncryptedEssence = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x03, 0x01, 0x02, 0x7E, 0x00, 0x00];
    /// <summary>
    /// Encrypted Triplet
    /// </summary>
    /// <remarks>
    /// Encrypted Triplet
    /// </remarks>
    private static readonly byte[] EncryptedTriplet = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x03, 0x01, 0x02, 0x7E, 0x01, 0x00];
    /// <summary>
    /// Entity
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] entity = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x21, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Entry
    /// </summary>
    /// <remarks>
    /// Entry
    /// </remarks>
    private static readonly byte[] Entry = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x00];
    /// <summary>
    /// Entry Administration
    /// </summary>
    /// <remarks>
    /// Entry Administration
    /// </remarks>
    private static readonly byte[] EntryAdministration = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x01, 0x01, 0x01, 0x01, 0x01, 0x04, 0x00];
    /// <summary>
    /// Error
    /// </summary>
    /// <remarks>
    /// Error
    /// </remarks>
    private static readonly byte[] Error = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Essence Container Labels
    /// </summary>
    /// <remarks>
    /// Essence Container Labels
    /// </remarks>
    private static readonly byte[] EssenceContainerLabels = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Essence Container Labels - Version 1
    /// </summary>
    /// <remarks>
    /// Essence Container Labels - Version 1
    /// </remarks>
    private static readonly byte[] EssenceContainerLabelsVersion1 = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Essence Data
    /// </summary>
    /// <remarks>
    /// Essence Data
    /// </remarks>
    private static readonly byte[] EssenceData = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x23, 0x00];
    /// <summary>
    /// Essence Descriptor
    /// </summary>
    /// <remarks>
    /// Essence Descriptor
    /// </remarks>
    private static readonly byte[] EssenceDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x24, 0x00];
    /// <summary>
    /// Essence Group
    /// </summary>
    /// <remarks>
    /// Essence Group
    /// </remarks>
    private static readonly byte[] EssenceGroup = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x05, 0x00];
    /// <summary>
    /// Event
    /// </summary>
    /// <remarks>
    /// Event
    /// Namespace: http://www.smpte-ra.org/reg/395/2014/13/1/aaf
    /// </remarks>
    private static readonly byte[] _event_aaf = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x06, 0x00];
    /// <summary>
    /// Event
    /// </summary>
    /// <remarks>
    /// To define an event.
    /// Namespace: http://www.ebu.ch/metadata/schemas/ebucore/smpte/class13/group
    /// </remarks>
    private static readonly byte[] _event_group = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x6C, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Event ID Request
    /// </summary>
    /// <remarks>
    /// Log event record by event ID request
    /// </remarks>
    private static readonly byte[] EventIDRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x02, 0x14, 0x00, 0x00, 0x00];
    /// <summary>
    /// Event ID Response
    /// </summary>
    /// <remarks>
    /// Log event record by event ID response
    /// </remarks>
    private static readonly byte[] EventIDResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x02, 0x15, 0x00, 0x00, 0x00];
    /// <summary>
    /// Event List Request
    /// </summary>
    /// <remarks>
    /// Log event list by time period request
    /// </remarks>
    private static readonly byte[] EventListRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x02, 0x12, 0x00, 0x00, 0x00];
    /// <summary>
    /// Event List Response
    /// </summary>
    /// <remarks>
    /// Log event list by time period response
    /// </remarks>
    private static readonly byte[] EventListResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x02, 0x13, 0x00, 0x00, 0x00];
    /// <summary>
    /// Event Text Descriptor
    /// </summary>
    /// <remarks>
    /// Event Text Descriptor
    /// </remarks>
    private static readonly byte[] EventTextDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x6F, 0x00];
    /// <summary>
    /// Event Package
    /// </summary>
    /// <remarks>
    /// Event Package
    /// </remarks>
    private static readonly byte[] EventTrack = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x39, 0x00];
    /// <summary>
    /// EVS Broadcast Equipment
    /// </summary>
    /// <remarks>
    /// Metadata registered by EVS Broadcast Equipment for private use
    /// </remarks>
    private static readonly byte[] EVSBroadcastEquipment = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Experimental
    /// </summary>
    /// <remarks>
    /// For use in multimedia research or other limited access, experimental environments
    /// </remarks>
    private static readonly byte[] Experimental = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Extendible Enumeration Element
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] ExtendibleEnumerationElement = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x28, 0x00, 0x00];
    /// <summary>
    /// Extension Scheme
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] ExtensionScheme = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x26, 0x00, 0x00];
    /// <summary>
    /// FFV1PictureSubDescriptor
    /// </summary>
    /// <remarks>
    /// FFV1 Picture Essence Descriptor
    /// </remarks>
    private static readonly byte[] FFV1PictureSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x81, 0x03];
    /// <summary>
    /// File Descriptor
    /// </summary>
    /// <remarks>
    /// File Descriptor
    /// </remarks>
    private static readonly byte[] FileDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x25, 0x00];
    /// <summary>
    /// Filler
    /// </summary>
    /// <remarks>
    /// Filler
    /// </remarks>
    private static readonly byte[] Filler = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x09, 0x00];
    /// <summary>
    /// Film Descriptor
    /// </summary>
    /// <remarks>
    /// Film Desciptor
    /// </remarks>
    private static readonly byte[] FilmDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x2D, 0x00];
    /// <summary>
    /// Filter
    /// </summary>
    /// <remarks>
    /// To define the characteristics of a filter.
    /// </remarks>
    private static readonly byte[] filter = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x5E, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Filter Setting
    /// </summary>
    /// <remarks>
    /// To describe the settings of a filter.
    /// </remarks>
    private static readonly byte[] filterSetting = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x5F, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// FLIR Systems, Inc.
    /// </summary>
    /// <remarks>
    /// Metadata registered by FLIR Systems, Inc. for private use
    /// </remarks>
    private static readonly byte[] FLIR = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Footer Partition Closed Complete
    /// </summary>
    /// <remarks>
    /// Footer Partition Closed Complete
    /// </remarks>
    private static readonly byte[] FooterPartitionClosedComplete = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x04, 0x04, 0x00];
    /// <summary>
    /// Footer Partition Closed Incomplete
    /// </summary>
    /// <remarks>
    /// Footer Partition Closed Incomplete
    /// </remarks>
    private static readonly byte[] FooterPartitionClosedIncomplete = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x04, 0x02, 0x00];
    /// <summary>
    /// Footer Partition Pack
    /// </summary>
    /// <remarks>
    /// Footer Partition Pack
    /// </remarks>
    private static readonly byte[] FooterPartitionPack = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x04, 0x00, 0x00];
    /// <summary>
    /// Format
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] format = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Format  Group
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] formatGroup = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x2D, 0x02, 0x00, 0x00, 0x00];
    /// <summary>
    /// Frame based
    /// </summary>
    /// <remarks>
    /// Frame-based metadata sets
    /// </remarks>
    private static readonly byte[] FrameBased = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Fraunhofer
    /// </summary>
    /// <remarks>
    /// Metadata registered by Fraunhofer for private use
    /// </remarks>
    private static readonly byte[] Fraunhofer = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Gain Interaction Range
    /// </summary>
    /// <remarks>
    /// To define a gain interaction range.
    /// </remarks>
    private static readonly byte[] gainInteractionRange = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x65, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// General purpose
    /// </summary>
    /// <remarks>
    /// General purpose
    /// </remarks>
    private static readonly byte[] GeneralPurpose = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Generate CPLProcessed Log Report Request
    /// </summary>
    /// <remarks>
    /// Generate CPLProcessed Log Report Request
    /// </remarks>
    private static readonly byte[] GenerateCPLProcessedLogReportRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x1E, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Generate CPLProcessed Log Report Response
    /// </summary>
    /// <remarks>
    /// Generate CPLProcessed Log Report Response
    /// </remarks>
    private static readonly byte[] GenerateCPLProcessedLogReportResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Generate Security Log Report Request
    /// </summary>
    /// <remarks>
    /// Generate Security Log Report Request
    /// </remarks>
    private static readonly byte[] GenerateSecurityLogReportRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x18, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Generate Security Log Report Response
    /// </summary>
    /// <remarks>
    /// Generate Security Log Report Response
    /// </remarks>
    private static readonly byte[] GenerateSecurityLogReportResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x19, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Generic Container Labels
    /// </summary>
    /// <remarks>
    /// Generic Container Labels
    /// </remarks>
    private static readonly byte[] GenericContainerLabels = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x03, 0x01, 0x02, 0x00, 0x00, 0x00];
    /// <summary>
    /// Generic Container Labels - Deprecated
    /// </summary>
    /// <remarks>
    /// Generic Container Labels - Deprecated
    /// </remarks>
    private static readonly byte[] GenericContainerLabelsDeprecated = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00];
    /// <summary>
    /// Generic Stream Partition
    /// </summary>
    /// <remarks>
    /// Generic Stream Partition
    /// </remarks>
    private static readonly byte[] GenericStreamPartition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x03, 0x11, 0x00];
    /// <summary>
    /// Generic Stream Text-based Set
    /// </summary>
    /// <remarks>
    /// Generic Stream Text-based Set
    /// </remarks>
    private static readonly byte[] GenericStreamTextBasedSet = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x04, 0x02, 0x01, 0x00];
    /// <summary>
    /// Genre
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] genre = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Get Certificate Request
    /// </summary>
    /// <remarks>
    /// Get Certificate Request
    /// </remarks>
    private static readonly byte[] GetCertificateRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Get Certificate Response
    /// </summary>
    /// <remarks>
    /// Get Certificate Response
    /// </remarks>
    private static readonly byte[] GetCertificateResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Get CPLProcessed Log Report Request
    /// </summary>
    /// <remarks>
    /// Get CPLProcessed Log Report Request
    /// </remarks>
    private static readonly byte[] GetCPLProcessedLogReportRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Get CPLProcessed Log Report Response
    /// </summary>
    /// <remarks>
    /// Get CPLProcessed Log Report Response
    /// </remarks>
    private static readonly byte[] GetCPLProcessedLogReportResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x21, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Get CPL Validation Result Request
    /// </summary>
    /// <remarks>
    /// Get CPL Validation Result Request
    /// </remarks>
    private static readonly byte[] GetCPLValidationResultRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x0A, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Get CPL Validation Result Response
    /// </summary>
    /// <remarks>
    /// Get CPL Validation Result Response
    /// </remarks>
    private static readonly byte[] GetCPLValidationResultResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x0B, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Get Device Info Request
    /// </summary>
    /// <remarks>
    /// Get Device Info Request
    /// </remarks>
    private static readonly byte[] GetDeviceInfoRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x14, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Get Device Info Response
    /// </summary>
    /// <remarks>
    /// Get Device Info Response
    /// </remarks>
    private static readonly byte[] GetDeviceInfoResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x15, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Get KDM Validation Result Request
    /// </summary>
    /// <remarks>
    /// Get KDM Validation Result Request
    /// </remarks>
    private static readonly byte[] GetKDMValidationResultRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x0E, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Get KDM Validation Result Response
    /// </summary>
    /// <remarks>
    /// Get KDM Validation Result Response
    /// </remarks>
    private static readonly byte[] GetKDMValidationResultResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x0F, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Get Secure Time Request
    /// </summary>
    /// <remarks>
    /// Get Secure Time Request
    /// </remarks>
    private static readonly byte[] GetSecureTimeRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Get Secure Time Response
    /// </summary>
    /// <remarks>
    /// Get Secure Time Response
    /// </remarks>
    private static readonly byte[] GetSecureTimeResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Get Security Log Report Request
    /// </summary>
    /// <remarks>
    /// Get Security Log Report Request
    /// </remarks>
    private static readonly byte[] GetSecurityLogReportRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x1A, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Get Security Log Report Response
    /// </summary>
    /// <remarks>
    /// Get Security Log Report Response
    /// </remarks>
    private static readonly byte[] GetSecurityLogReportResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x1B, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Get Status Request
    /// </summary>
    /// <remarks>
    /// Get Status Request
    /// </remarks>
    private static readonly byte[] GetStatusRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x16, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Get Status Response
    /// </summary>
    /// <remarks>
    /// Get Status Response
    /// </remarks>
    private static readonly byte[] GetStatusResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x17, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// GPI Trigger
    /// </summary>
    /// <remarks>
    /// GPI Trigger
    /// </remarks>
    private static readonly byte[] GPITrigger = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x07, 0x00];
    /// <summary>
    /// Grass Valley, Inc.
    /// </summary>
    /// <remarks>
    /// Metadata registered by Grass Valley, Inc. for private use
    /// </remarks>
    private static readonly byte[] GrassValleyInc = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Group Of Soundfield Groups Label Sub-Descriptor
    /// </summary>
    /// <remarks>
    /// Group Of Soundfield Groups Label Sub-Descriptor
    /// </remarks>
    private static readonly byte[] GroupOfSoundfieldGroupsLabelSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x6D, 0x00];
    /// <summary>
    /// Episodic Item Set
    /// </summary>
    /// <remarks>
    /// Episodic Item Set
    /// </remarks>
    private static readonly byte[] GroupRelationship = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x12, 0x01, 0x00];
    /// <summary>
    /// GROUPS
    /// </summary>
    /// <remarks>
    /// Register of Packs and Sets of Metadata Elements
    /// </remarks>
    private static readonly byte[] _GROUPS = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Harris Corporation
    /// </summary>
    /// <remarks>
    /// Metadata registered by Harris Corporation for private use
    /// </remarks>
    private static readonly byte[] HarrisCorporation = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Hash
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] hash = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x46, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// HBO
    /// </summary>
    /// <remarks>
    /// Metadata registered by Home Box Office, Inc. for private use
    /// </remarks>
    private static readonly byte[] HBO = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Header Partition Closed Complete
    /// </summary>
    /// <remarks>
    /// Header Partition Closed Complete
    /// </remarks>
    private static readonly byte[] HeaderPartitionClosedComplete = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x02, 0x04, 0x00];
    /// <summary>
    /// Header Partition Closed Incomplete
    /// </summary>
    /// <remarks>
    /// Header Partition Closed Incomplete
    /// </remarks>
    private static readonly byte[] HeaderPartitionClosedIncomplete = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x02, 0x02, 0x00];
    /// <summary>
    /// Header Partition Open Complete
    /// </summary>
    /// <remarks>
    /// Header Partition Open Complete
    /// </remarks>
    private static readonly byte[] HeaderPartitionOpenComplete = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x02, 0x03, 0x00];
    /// <summary>
    /// Header Partition Open Incomplete
    /// </summary>
    /// <remarks>
    /// Header Partition Open Incomplete
    /// </remarks>
    private static readonly byte[] HeaderPartitionOpenIncomplete = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00];
    /// <summary>
    /// Header Partition Pack
    /// </summary>
    /// <remarks>
    /// Header Partition Pack
    /// </remarks>
    private static readonly byte[] HeaderPartitionPack = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x02, 0x00, 0x00];
    /// <summary>
    /// Height
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] height = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x41, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// HEVC Sub-Descriptor
    /// </summary>
    /// <remarks>
    /// HEVC Sub-Descriptor
    /// </remarks>
    private static readonly byte[] HEVCSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x81, 0x01];
    /// <summary>
    /// HTML Clip
    /// </summary>
    /// <remarks>
    /// HTML Clip
    /// </remarks>
    private static readonly byte[] HTMLClip = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x13, 0x00];
    /// <summary>
    /// HTML Descriptor
    /// </summary>
    /// <remarks>
    /// HTML Descriptor
    /// </remarks>
    private static readonly byte[] HTMLDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x2A, 0x00];
    /// <summary>
    /// HTML Parsed Text Descriptor
    /// </summary>
    /// <remarks>
    /// HTML Parsed Text Descriptor
    /// </remarks>
    private static readonly byte[] HTMLParsedTextDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x55, 0x00];
    /// <summary>
    /// IAB Essence Descriptor
    /// </summary>
    /// <remarks>
    /// Identifies an Immersive Audio Bitstream Essence Descriptor
    /// </remarks>
    private static readonly byte[] IABEssenceDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x7B, 0x00];
    /// <summary>
    /// IAB Soundfield Label SubDescriptor
    /// </summary>
    /// <remarks>
    /// Identifies an IAB Soundfield Label SubDescriptor
    /// </remarks>
    private static readonly byte[] IABSoundfieldLabelSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x7C, 0x00];
    /// <summary>
    /// Immersive Audio Data Essence Descriptor
    /// </summary>
    /// <remarks>
    /// Immersive Audio Data Essence Descriptor
    /// </remarks>
    private static readonly byte[] IADataEssenceDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x05, 0x0E, 0x09, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// IA Data Essence SubDescriptor
    /// </summary>
    /// <remarks>
    /// Defines the Immersive Audio Data Essence SubDescriptor Set
    /// </remarks>
    private static readonly byte[] IADataEssenceSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x05, 0x0E, 0x09, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// IdeasUnlimited.TV
    /// </summary>
    /// <remarks>
    /// Metadata registered by IdeasUnlimited.TV for private use
    /// </remarks>
    private static readonly byte[] IdeasUnlimitedTV = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Identification
    /// </summary>
    /// <remarks>
    /// Identification
    /// </remarks>
    private static readonly byte[] Identification = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x30, 0x00];
    /// <summary>
    /// IDENTIFICATION & LOCATION
    /// </summary>
    /// <remarks>
    /// Identification and location metadata groups
    /// </remarks>
    private static readonly byte[] IDENTIFICATIONLOCATION = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Identifier
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] identifier = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// IDRef
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] IDRef = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x4B, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Image Format
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] imageFormat = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x32, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Import Descriptor
    /// </summary>
    /// <remarks>
    /// Import Descriptor
    /// </remarks>
    private static readonly byte[] ImportDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x4A, 0x00];
    /// <summary>
    /// Index Tables
    /// </summary>
    /// <remarks>
    /// Index Tables
    /// </remarks>
    private static readonly byte[] IndexTables = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x10, 0x00, 0x00];
    /// <summary>
    /// IndexTableSegment
    /// </summary>
    /// <remarks>
    /// IndexTableSegment
    /// </remarks>
    private static readonly byte[] IndexTableSegment = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x10, 0x01, 0x00];
    /// <summary>
    /// Interchange Object
    /// </summary>
    /// <remarks>
    /// Interchange Object
    /// </remarks>
    private static readonly byte[] InterchangeObject = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00];
    /// <summary>
    /// Interpolation Definition
    /// </summary>
    /// <remarks>
    /// Interpolation Definition
    /// </remarks>
    private static readonly byte[] InterpolationDefinition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x21, 0x00];
    /// <summary>
    /// INTERPRETIVE
    /// </summary>
    /// <remarks>
    /// Interpretive metadata groups
    /// </remarks>
    private static readonly byte[] INTERPRETIVE = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Invalidate Playback Request
    /// </summary>
    /// <remarks>
    /// Invalidate Playback Request
    /// </remarks>
    private static readonly byte[] InvalidatePlaybackRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x12, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Invalidate Playback Response
    /// </summary>
    /// <remarks>
    /// Invalidate Playback Response
    /// </remarks>
    private static readonly byte[] InvalidatePlaybackResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x13, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// IPV Ltd
    /// </summary>
    /// <remarks>
    /// Metadata registered by IPV Ltd for private use
    /// </remarks>
    private static readonly byte[] IPVLtd = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// IRT
    /// </summary>
    /// <remarks>
    /// Metadata registered by the Institut für Rundfunktechnik GmbH for public use
    /// </remarks>
    private static readonly byte[] IRT = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Inter-Society Digital Cinema Forum
    /// </summary>
    /// <remarks>
    /// Metadata registered by Inter-Society Digital Cinema Forum for public use
    /// </remarks>
    private static readonly byte[] ISDCF = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// ISXD Data Essence Descriptor
    /// </summary>
    /// <remarks>
    /// Identifies an ISXD Data Essence Descriptor
    /// </remarks>
    private static readonly byte[] ISXDDataEssenceDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x05, 0x0E, 0x09, 0x05, 0x02, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// JPEG 2000 Sub-Descriptor
    /// </summary>
    /// <remarks>
    /// JPEG 2000 Sub-Descriptor
    /// </remarks>
    private static readonly byte[] JPEG2000SubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x5A, 0x00];
    /// <summary>
    /// JPEG XS SubDescriptor
    /// </summary>
    /// <remarks>
    /// JPEG XS SubDescriptor
    /// </remarks>
    private static readonly byte[] JPEGXSSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x81, 0x02];
    /// <summary>
    /// JVC
    /// </summary>
    /// <remarks>
    /// Metadata registered by Victor Company of Japan, Limited (JVC) for private use
    /// </remarks>
    private static readonly byte[] JVC = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Key Point Set
    /// </summary>
    /// <remarks>
    /// Key Point Set
    /// </remarks>
    private static readonly byte[] Keypoint = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x17, 0x06, 0x00];
    /// <summary>
    /// KLV Data
    /// </summary>
    /// <remarks>
    /// KLV Data
    /// </remarks>
    private static readonly byte[] KLVData = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x40, 0x00];
    /// <summary>
    /// KLV Data Definition
    /// </summary>
    /// <remarks>
    /// KLV Data Definition
    /// </remarks>
    private static readonly byte[] KLVDataDefinition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x4D, 0x00];
    /// <summary>
    /// Language
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] language = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x12, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Leaf
    /// </summary>
    /// <remarks>
    /// Leaf
    /// </remarks>
    private static readonly byte[] Leaf = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x01, 0x01, 0x01, 0x01, 0x01, 0x05, 0x00];
    /// <summary>
    /// Lens Unit Acquisition Metadata
    /// </summary>
    /// <remarks>
    /// Lens Unit Acquisition Metadata
    /// </remarks>
    private static readonly byte[] LensUnitAcquisitionMetadata = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x02, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00];
    /// <summary>
    /// Link encryption
    /// </summary>
    /// <remarks>
    /// Link encryption
    /// </remarks>
    private static readonly byte[] LinkEncryption = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Link Encryption Key Load Request
    /// </summary>
    /// <remarks>
    /// Link decryptor block key load request
    /// </remarks>
    private static readonly byte[] LinkEncryptionKeyLoadRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x03, 0x20, 0x00, 0x00, 0x00];
    /// <summary>
    /// Link Encryption Key Load Response
    /// </summary>
    /// <remarks>
    /// Link decryptor block key load response
    /// </remarks>
    private static readonly byte[] LinkEncryptionKeyLoadResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x03, 0x21, 0x00, 0x00, 0x00];
    /// <summary>
    /// Link Encryption Key Query All Request
    /// </summary>
    /// <remarks>
    /// Link decryptor block all keys query request
    /// </remarks>
    private static readonly byte[] LinkEncryptionKeyQueryAllRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x03, 0x24, 0x00, 0x00, 0x00];
    /// <summary>
    /// Link Encryption Key Query All Response
    /// </summary>
    /// <remarks>
    /// Link decryptor block all keys query response
    /// </remarks>
    private static readonly byte[] LinkEncryptionKeyQueryAllResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x03, 0x25, 0x00, 0x00, 0x00];
    /// <summary>
    /// Link Encryption Key Query ID Request
    /// </summary>
    /// <remarks>
    /// Link decryptor block key query by key ID request
    /// </remarks>
    private static readonly byte[] LinkEncryptionKeyQueryIDRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x03, 0x22, 0x00, 0x00, 0x00];
    /// <summary>
    /// Link Encryption Key Query ID Response
    /// </summary>
    /// <remarks>
    /// Link decryptor block key query by key ID response
    /// </remarks>
    private static readonly byte[] LinkEncryptionKeyQueryIDResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x03, 0x23, 0x00, 0x00, 0x00];
    /// <summary>
    /// Link Encryption Purge All Request
    /// </summary>
    /// <remarks>
    /// Link decryptor block all keys purge request
    /// </remarks>
    private static readonly byte[] LinkEncryptionPurgeAllRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x03, 0x28, 0x00, 0x00, 0x00];
    /// <summary>
    /// Link Encryption Purge All Response
    /// </summary>
    /// <remarks>
    /// Link decryptor block all keys purge response
    /// </remarks>
    private static readonly byte[] LinkEncryptionPurgeAllResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x03, 0x29, 0x00, 0x00, 0x00];
    /// <summary>
    /// Link Encryption Purge ID Request
    /// </summary>
    /// <remarks>
    /// Link decryptor block key purge by key ID request
    /// </remarks>
    private static readonly byte[] LinkEncryptionPurgeIDRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x03, 0x26, 0x00, 0x00, 0x00];
    /// <summary>
    /// Link Encryption Purge ID Response
    /// </summary>
    /// <remarks>
    /// Link decryptor block key purge by key ID response
    /// </remarks>
    private static readonly byte[] LinkEncryptionPurgeIDResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x03, 0x27, 0x00, 0x00, 0x00];
    /// <summary>
    /// LOC_ApplicationSpecifications_Groups
    /// </summary>
    /// <remarks>
    /// Library of Congress Application Specifications Groups
    /// </remarks>
    private static readonly byte[] LOC_ApplicationSpecifications_Groups = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x0E, 0x0D, 0x0E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// LOC_ApplicationSpecifications_Groups_V1
    /// </summary>
    /// <remarks>
    /// Library of Congress Application Specifications Groups V1
    /// </remarks>
    private static readonly byte[] LOC_ApplicationSpecifications_Groups_V1 = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x0E, 0x0D, 0x0E, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// LOC_Groups
    /// </summary>
    /// <remarks>
    /// Metadata registered by the Library of Congress for public use
    /// </remarks>
    private static readonly byte[] LOC_Groups = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x0E, 0x0D, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Location Set
    /// </summary>
    /// <remarks>
    /// Location Set
    /// Namespace: http://www.smpte-ra.org/reg/395/2014/13/1/aaf
    /// </remarks>
    private static readonly byte[] Location_aaf = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x1A, 0x04, 0x00];
    /// <summary>
    /// Location
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// Namespace: http://www.ebu.ch/metadata/schemas/ebucore/smpte/class13/group
    /// </remarks>
    private static readonly byte[] Location_group = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x15, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Locator
    /// </summary>
    /// <remarks>
    /// Locator
    /// Namespace: http://www.smpte-ra.org/reg/395/2014/13/1/aaf
    /// </remarks>
    private static readonly byte[] Locator_aaf = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x31, 0x00];
    /// <summary>
    /// Locator
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// Namespace: http://www.ebu.ch/metadata/schemas/ebucore/smpte/class13/group
    /// </remarks>
    private static readonly byte[] Locator_group = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x47, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Loudness Metadata
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] loudnessMetadata = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x4C, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Material Package
    /// </summary>
    /// <remarks>
    /// Material Package
    /// </remarks>
    private static readonly byte[] MaterialPackage = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x36, 0x00];
    /// <summary>
    /// Maximum Light Level Metadata
    /// </summary>
    /// <remarks>
    /// Identifies a Maximum Light Level Metadata Defined Length Pack
    /// </remarks>
    private static readonly byte[] MaximumLightLevelMetadata = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x05, 0x32, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// MCA Label Sub-Descriptor
    /// </summary>
    /// <remarks>
    /// MCA Label Sub-Descriptor
    /// </remarks>
    private static readonly byte[] MCALabelSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x6A, 0x00];
    /// <summary>
    /// MD Color Volume Metadata
    /// </summary>
    /// <remarks>
    /// Identifies a Mastering Display Color Volume Metadata Defined Length Pack
    /// </remarks>
    private static readonly byte[] MDColorVolumeMetadata = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x05, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Medium
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] medium = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x3D, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Messages
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] Messages = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Metadata Format
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] metadataFormat = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x59, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Metadata  Schema Information
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] metadataSchemaInformation = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Meta-Definition
    /// </summary>
    /// <remarks>
    /// Meta-Definition
    /// </remarks>
    private static readonly byte[] MetaDefinition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x24, 0x00, 0x00];
    /// <summary>
    /// Meta-Definitions
    /// </summary>
    /// <remarks>
    /// Meta-Definitions
    /// </remarks>
    private static readonly byte[] MetaDefinitions = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00];
    /// <summary>
    /// Meta-Dictionary
    /// </summary>
    /// <remarks>
    /// Meta-Dictionary
    /// </remarks>
    private static readonly byte[] MetaDictionary = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x25, 0x00, 0x00];
    /// <summary>
    /// MGA Audio Metadata SubDescriptor
    /// </summary>
    /// <remarks>
    /// MGA Audio Metadata SubDescriptor
    /// </remarks>
    private static readonly byte[] MGAAudioMetadataSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x81, 0x07];
    /// <summary>
    /// MGA Sound Essence Descriptor
    /// </summary>
    /// <remarks>
    /// MGA Sound Essence Descriptor
    /// </remarks>
    private static readonly byte[] MGASoundEssenceDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x81, 0x06];
    /// <summary>
    /// MGA Soundfield Group Label SubDescriptor
    /// </summary>
    /// <remarks>
    /// MGA Soundfield Group Label SubDescriptor
    /// </remarks>
    private static readonly byte[] MGASoundfieldGroupLabelSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x81, 0x08];
    /// <summary>
    /// MISB Classified
    /// </summary>
    /// <remarks>
    /// Classified metadata registered by MISB (Motion Imagery Standards Board) for Systems and ASPA
    /// </remarks>
    private static readonly byte[] MISBClassified = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// MISB Systems
    /// </summary>
    /// <remarks>
    /// Unclassified metadata registered by MISB (Motion Imagery Standards Board) for Systems
    /// </remarks>
    private static readonly byte[] MISBSystems = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// MPEG-4 Visual Sub-Descriptor
    /// </summary>
    /// <remarks>
    /// MPEG-4 Visual Sub-Descriptor
    /// </remarks>
    private static readonly byte[] MPEG4VisualSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x68, 0x00];
    /// <summary>
    /// MPEG Audio Descriptor
    /// </summary>
    /// <remarks>
    /// MPEG Audio Descriptor
    /// </remarks>
    private static readonly byte[] MPEGAudioDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x5E, 0x00];
    /// <summary>
    /// MPEG Video Descriptor
    /// </summary>
    /// <remarks>
    /// MPEG Video Descriptor
    /// </remarks>
    private static readonly byte[] MPEGVideoDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x51, 0x00];
    /// <summary>
    /// Multiple Descriptor
    /// </summary>
    /// <remarks>
    /// Multiple Descriptor
    /// </remarks>
    private static readonly byte[] MultipleDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x44, 0x00];
    /// <summary>
    /// MXF File Structure
    /// </summary>
    /// <remarks>
    /// MXF File Structure
    /// </remarks>
    private static readonly byte[] MXFFileStructure = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// MXF File Structure Sets and Packs
    /// </summary>
    /// <remarks>
    /// MXF File Structure Sets and Packs
    /// </remarks>
    private static readonly byte[] MXFFileStructureSetsAndPacks = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00];
    /// <summary>
    /// MXF File Structure Version 1
    /// </summary>
    /// <remarks>
    /// MXF File Structure Version 1
    /// </remarks>
    private static readonly byte[] MXFFileStructureVersion1 = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Name-Value Set
    /// </summary>
    /// <remarks>
    /// Name-Value Set
    /// </remarks>
    private static readonly byte[] NameValue = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x1F, 0x01, 0x00];
    /// <summary>
    /// Nested Scope
    /// </summary>
    /// <remarks>
    /// Nested Scope
    /// </remarks>
    private static readonly byte[] NestedScope = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0B, 0x00];
    /// <summary>
    /// Network Locator
    /// </summary>
    /// <remarks>
    /// Network Locator
    /// </remarks>
    private static readonly byte[] NetworkLocator = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x32, 0x00];
    /// <summary>
    /// NHK
    /// </summary>
    /// <remarks>
    /// Metadata registered by Nippon Hoso Kyokai (NHK) for private use
    /// </remarks>
    private static readonly byte[] NHK = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// NL Technology, LLC
    /// </summary>
    /// <remarks>
    /// Metadata registered by NL Technology, LLC for private use
    /// </remarks>
    private static readonly byte[] NLTechnologyLLC = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Node
    /// </summary>
    /// <remarks>
    /// Node
    /// </remarks>
    private static readonly byte[] Node = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x01, 0x01, 0x01, 0x01, 0x01, 0x06, 0x00];
    /// <summary>
    /// Object Type
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] objectType = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x0F, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Bad Request Response
    /// </summary>
    /// <remarks>
    /// Bad Request Response
    /// </remarks>
    private static readonly byte[] OMBBadRequestResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Omneon Video Networks
    /// </summary>
    /// <remarks>
    /// Metadata registered by Omneon Video Networks for private use
    /// </remarks>
    private static readonly byte[] OmneonVideoNetworks = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Operational Pattern Definition
    /// </summary>
    /// <remarks>
    /// Operational Pattern Definition
    /// </remarks>
    private static readonly byte[] OPDefinition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x7D, 0x00];
    /// <summary>
    /// Operation Definition
    /// </summary>
    /// <remarks>
    /// Operation Definition
    /// </remarks>
    private static readonly byte[] OperationDefinition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x1C, 0x00];
    /// <summary>
    /// Operation Group
    /// </summary>
    /// <remarks>
    /// Operation Group
    /// </remarks>
    private static readonly byte[] OperationGroup = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0A, 0x00];
    /// <summary>
    /// Operations Stereoscopic Sub-Descriptor
    /// </summary>
    /// <remarks>
    /// Operations Stereoscopic Sub-Descriptor
    /// </remarks>
    private static readonly byte[] OperationsStereoscopicSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x72, 0x00];
    /// <summary>
    /// Organisation Set
    /// </summary>
    /// <remarks>
    /// Organisation Set
    /// Namespace: http://www.smpte-ra.org/reg/395/2014/13/1/aaf
    /// </remarks>
    private static readonly byte[] Organization_aaf = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x1A, 0x03, 0x00];
    /// <summary>
    /// Organization
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// Namespace: http://www.ebu.ch/metadata/schemas/ebucore/smpte/class13/group
    /// </remarks>
    private static readonly byte[] Organization_group = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x23, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Organizationally Registered as Private
    /// </summary>
    /// <remarks>
    /// Organizationally Registered as Private
    /// </remarks>
    private static readonly byte[] OrganizationallyRegisteredasPrivate = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Organizationally Registered for Public Use
    /// </summary>
    /// <remarks>
    /// Organizationally Registered for Public Use
    /// </remarks>
    private static readonly byte[] OrganizationallyRegisteredforPublicUse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Other MXF Packs
    /// </summary>
    /// <remarks>
    /// Other MXF Packs
    /// </remarks>
    private static readonly byte[] OtherMXFPacks = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x11, 0x00, 0x00];
    /// <summary>
    /// Package
    /// </summary>
    /// <remarks>
    /// Package
    /// </remarks>
    private static readonly byte[] Package = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x34, 0x00];
    /// <summary>
    /// Package Info
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] packageInfo = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x3C, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Package Marker
    /// </summary>
    /// <remarks>
    /// Package Marker
    /// </remarks>
    private static readonly byte[] PackageMarker = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x60, 0x00];
    /// <summary>
    /// Panasonic
    /// </summary>
    /// <remarks>
    /// Metadata registered by Panasonic for private use
    /// </remarks>
    private static readonly byte[] Panasonic = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Parameter
    /// </summary>
    /// <remarks>
    /// Parameter
    /// </remarks>
    private static readonly byte[] Parameter = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x3C, 0x00];
    /// <summary>
    /// Parameter Definition
    /// </summary>
    /// <remarks>
    /// Parameter Definition
    /// </remarks>
    private static readonly byte[] ParameterDefinition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x1D, 0x00];
    /// <summary>
    /// PARAMETRIC
    /// </summary>
    /// <remarks>
    /// Parametric metadata groups
    /// </remarks>
    private static readonly byte[] PARAMETRIC = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Parsed Text Descriptor
    /// </summary>
    /// <remarks>
    /// Parsed Text Descriptor
    /// </remarks>
    private static readonly byte[] ParsedTextDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x52, 0x00];
    /// <summary>
    /// Part
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] part = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x43, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Participant Role Set
    /// </summary>
    /// <remarks>
    /// Participant Role Set
    /// </remarks>
    private static readonly byte[] Participant = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x18, 0x01, 0x00];
    /// <summary>
    /// Partition Pack
    /// </summary>
    /// <remarks>
    /// Partition Pack
    /// </remarks>
    private static readonly byte[] PartitionPack = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00];
    /// <summary>
    /// Part  Metadata
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] partMetadata = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x44, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// PBS
    /// </summary>
    /// <remarks>
    /// Metadata registered by the Public Broadcasting Service for public use
    /// </remarks>
    private static readonly byte[] PBS = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Period Of Time
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] periodOfTime = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x18, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Person Set
    /// </summary>
    /// <remarks>
    /// Person Set
    /// </remarks>
    private static readonly byte[] Person = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x1A, 0x02, 0x00];
    /// <summary>
    /// PHDR Metadata Track Sub Descriptor
    /// </summary>
    /// <remarks>
    /// Identifies a PHDR Metadata Track Sub Descriptor
    /// </remarks>
    private static readonly byte[] PHDRMetadataTrackSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x05, 0x0E, 0x09, 0x06, 0x07, 0x01, 0x01, 0x01, 0x03];
    /// <summary>
    /// Physical Descriptor
    /// </summary>
    /// <remarks>
    /// Physical Descriptor
    /// </remarks>
    private static readonly byte[] PhysicalDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x49, 0x00];
    /// <summary>
    /// Picture Descriptor
    /// </summary>
    /// <remarks>
    /// Picture Descriptor
    /// </remarks>
    private static readonly byte[] PictureDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x27, 0x00];
    /// <summary>
    /// Picture Format Set
    /// </summary>
    /// <remarks>
    /// Picture Format Set
    /// </remarks>
    private static readonly byte[] PictureFormat = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x1D, 0x01, 0x00];
    /// <summary>
    /// Planning
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] planning = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x2C, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Plugin Definition
    /// </summary>
    /// <remarks>
    /// Plugin Definition
    /// </remarks>
    private static readonly byte[] PluginDefinition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x1E, 0x00];
    /// <summary>
    /// Position Interaction Range
    /// </summary>
    /// <remarks>
    /// To define a position interaction range.
    /// </remarks>
    private static readonly byte[] positionInteractionRange = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x66, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Preface
    /// </summary>
    /// <remarks>
    /// Preface
    /// </remarks>
    private static readonly byte[] Preface = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x2F, 0x00];
    /// <summary>
    /// PrimerPack
    /// </summary>
    /// <remarks>
    /// PrimerPack
    /// </remarks>
    private static readonly byte[] PrimerPack = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x05, 0x01, 0x00];
    /// <summary>
    /// Primer Packs
    /// </summary>
    /// <remarks>
    /// Primer Packs
    /// </remarks>
    private static readonly byte[] PrimerPacks = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x05, 0x00, 0x00];
    /// <summary>
    /// Pro-MPEG Forum
    /// </summary>
    /// <remarks>
    /// Metadata registered by the Pro-MPEG Forum for public use
    /// </remarks>
    private static readonly byte[] Pro_MPEGForum = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// PROCESS
    /// </summary>
    /// <remarks>
    /// Process metadata groups
    /// </remarks>
    private static readonly byte[] PROCESS = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Processing Set
    /// </summary>
    /// <remarks>
    /// Processing Set
    /// </remarks>
    private static readonly byte[] Processing = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x20, 0x01, 0x00];
    /// <summary>
    /// Production/Clip Framework
    /// </summary>
    /// <remarks>
    /// Production/Clip Framework
    /// </remarks>
    private static readonly byte[] ProductionClipFramework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x7F, 0x02, 0x00];
    /// <summary>
    /// Production Framework
    /// </summary>
    /// <remarks>
    /// Production Framework
    /// </remarks>
    private static readonly byte[] ProductionFramework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x01, 0x01, 0x00];
    /// <summary>
    /// Production Metadata
    /// </summary>
    /// <remarks>
    /// Metadata sets created at the point of creation or capture
    /// </remarks>
    private static readonly byte[] ProductionMetadata = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Project Set
    /// </summary>
    /// <remarks>
    /// Project Set
    /// </remarks>
    private static readonly byte[] Project = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x20, 0x02, 0x00];
    /// <summary>
    /// Projector Certificate Request
    /// </summary>
    /// <remarks>
    /// Projector Certificate Request
    /// </remarks>
    private static readonly byte[] ProjectorCertificateRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x02, 0x18, 0x00, 0x00, 0x00];
    /// <summary>
    /// Projector Certificate Response
    /// </summary>
    /// <remarks>
    /// Projector Certificate Resposne
    /// </remarks>
    private static readonly byte[] ProjectorCertificateResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x02, 0x19, 0x00, 0x00, 0x00];
    /// <summary>
    /// Property Alias Definition
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] PropertyAliasDefinition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x27, 0x00, 0x00];
    /// <summary>
    /// Property Definition
    /// </summary>
    /// <remarks>
    /// Property Definition
    /// </remarks>
    private static readonly byte[] PropertyDefinition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00];
    /// <summary>
    /// Publication Set
    /// </summary>
    /// <remarks>
    /// Publication Set
    /// </remarks>
    private static readonly byte[] Publication = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x14, 0x02, 0x00];
    /// <summary>
    /// Publication Channel
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] publicationChannel = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x1E, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Publication Event
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] publicationEvent = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x1C, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Publication History
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] publicationHistory = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x1D, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Publication Medium
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] publicationMedium = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x1F, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Publication Service
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] publicationService = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Pulldown
    /// </summary>
    /// <remarks>
    /// Pulldown
    /// </remarks>
    private static readonly byte[] Pulldown = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0C, 0x00];
    /// <summary>
    /// Quantel Ltd
    /// </summary>
    /// <remarks>
    /// Metadata registered by Quantel Ltd for private use
    /// </remarks>
    private static readonly byte[] QuantelLtd = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Random Index Pack
    /// </summary>
    /// <remarks>
    /// Random Index Pack
    /// </remarks>
    private static readonly byte[] RandomIndexPack = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x11, 0x01, 0x00];
    /// <summary>
    /// Rating
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] rating = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x1B, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Rational
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] rational = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x3F, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Recording Descriptor
    /// </summary>
    /// <remarks>
    /// Recording Descriptor
    /// </remarks>
    private static readonly byte[] RecordingDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x4B, 0x00];
    /// <summary>
    /// RED
    /// </summary>
    /// <remarks>
    /// Metadata registered by RED Digital Cinema, LLC. for private use
    /// </remarks>
    private static readonly byte[] RED = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Reference screen
    /// </summary>
    /// <remarks>
    /// To define a reference screen.
    /// </remarks>
    private static readonly byte[] referenceScreen = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x60, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Reference Screen Centre Position
    /// </summary>
    /// <remarks>
    /// To define the centre position of a reference screen.
    /// </remarks>
    private static readonly byte[] referenceScreenCentrePosition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x61, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Reference Screen Width
    /// </summary>
    /// <remarks>
    /// To define the width of a reference screen.
    /// </remarks>
    private static readonly byte[] referenceScreenWidth = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x62, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Region
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] region = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x27, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Register
    /// </summary>
    /// <remarks>
    /// Register
    /// </remarks>
    private static readonly byte[] Register = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x01, 0x01, 0x01, 0x01, 0x01, 0x07, 0x00];
    /// <summary>
    /// Register Administration
    /// </summary>
    /// <remarks>
    /// Register Administration
    /// </remarks>
    private static readonly byte[] RegisterAdministration = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x01, 0x01, 0x01, 0x01, 0x01, 0x08, 0x00];
    /// <summary>
    /// Registry Interchange Format (RIF)
    /// </summary>
    /// <remarks>
    /// Registry Interchange Format (RIF)
    /// </remarks>
    private static readonly byte[] RegistryInterchangeFormatRIF = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// RELATIONAL
    /// </summary>
    /// <remarks>
    /// Relational metadata groups
    /// </remarks>
    private static readonly byte[] RELATIONAL = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// RGBA Descriptor
    /// </summary>
    /// <remarks>
    /// RGBA Descriptor
    /// </remarks>
    private static readonly byte[] RGBADescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x29, 0x00];
    /// <summary>
    /// Rif Base Class
    /// </summary>
    /// <remarks>
    /// Rif Base Class
    /// </remarks>
    private static readonly byte[] RifBaseClass = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x01, 0x01, 0x01, 0x01, 0x01, 0x09, 0x00];
    /// <summary>
    /// RIFF Chunk
    /// </summary>
    /// <remarks>
    /// RIFF Chunk
    /// </remarks>
    private static readonly byte[] RIFFChunk = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x4F, 0x00];
    /// <summary>
    /// RIF Version 1 Compatible Classes
    /// </summary>
    /// <remarks>
    /// RIF Version 1 Compatible Classes
    /// </remarks>
    private static readonly byte[] RIFVersion1CompatibleClasses = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00];
    /// <summary>
    /// Rights Set
    /// </summary>
    /// <remarks>
    /// Rights Set
    /// Namespace: http://www.smpte-ra.org/reg/395/2014/13/1/aaf
    /// </remarks>
    private static readonly byte[] Rights_aaf = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x1C, 0x02, 0x00];
    /// <summary>
    /// Rights
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// Namespace: http://www.ebu.ch/metadata/schemas/ebucore/smpte/class13/group
    /// </remarks>
    private static readonly byte[] Rights_group = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x19, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Role
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] role = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x29, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Root
    /// </summary>
    /// <remarks>
    /// Root
    /// </remarks>
    private static readonly byte[] Root = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00];
    /// <summary>
    /// RP217 Descriptor
    /// </summary>
    /// <remarks>
    /// RP217 Descriptor
    /// </remarks>
    private static readonly byte[] RP217Descriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x56, 0x00];
    /// <summary>
    /// Rules Based Specifications Version 1
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] RulesBasedSpecificationsVersion1 = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// S-ADM Audio Metadata SubDescriptor
    /// </summary>
    /// <remarks>
    /// S-ADM Audio Metadata SubDescriptor
    /// </remarks>
    private static readonly byte[] SADMAudioMetadataSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x81, 0x09];
    /// <summary>
    /// Scene Framework
    /// </summary>
    /// <remarks>
    /// Scene Framework
    /// </remarks>
    private static readonly byte[] SceneFramework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x01, 0x03, 0x00];
    /// <summary>
    /// Scope Reference
    /// </summary>
    /// <remarks>
    /// Scope Reference
    /// </remarks>
    private static readonly byte[] ScopeReference = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0D, 0x00];
    /// <summary>
    /// Scripting Set
    /// </summary>
    /// <remarks>
    /// Scripting Set
    /// </remarks>
    private static readonly byte[] Scripting = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x17, 0x03, 0x00];
    /// <summary>
    /// Secure Processing Block Query Request
    /// </summary>
    /// <remarks>
    /// Secure processing block status request
    /// </remarks>
    private static readonly byte[] SecureProcessingBlockQueryRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x02, 0x16, 0x00, 0x00, 0x00];
    /// <summary>
    /// Secure Processing Block Query Response
    /// </summary>
    /// <remarks>
    /// Secure processing block status response
    /// </remarks>
    private static readonly byte[] SecureProcessingBlockQueryResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x02, 0x17, 0x00, 0x00, 0x00];
    /// <summary>
    /// Segment
    /// </summary>
    /// <remarks>
    /// Segment
    /// </remarks>
    private static readonly byte[] Segment = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x00];
    /// <summary>
    /// Segmentation
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] Segmentation = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x07, 0x01, 0x01, 0x01, 0x00, 0x00];
    /// <summary>
    /// Selector
    /// </summary>
    /// <remarks>
    /// Selector
    /// </remarks>
    private static readonly byte[] Selector = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0E, 0x00];
    /// <summary>
    /// Sequence
    /// </summary>
    /// <remarks>
    /// Sequence
    /// </remarks>
    private static readonly byte[] Sequence = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0F, 0x00];
    /// <summary>
    /// Setting Period Set
    /// </summary>
    /// <remarks>
    /// Setting Period Set
    /// </remarks>
    private static readonly byte[] SettingPeriod = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x17, 0x02, 0x00];
    /// <summary>
    /// SGML Descriptor
    /// </summary>
    /// <remarks>
    /// SGML Descriptor
    /// </remarks>
    private static readonly byte[] SGMLDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x53, 0x00];
    /// <summary>
    /// Shot Set
    /// </summary>
    /// <remarks>
    /// Shot Set
    /// </remarks>
    private static readonly byte[] Shot = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x17, 0x05, 0x00];
    /// <summary>
    /// Signing  Format
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] signingFormat = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x39, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// SMS-OMB Communications Protocol
    /// </summary>
    /// <remarks>
    /// Protocol Metadata Packs for SMS-OMB Communication
    /// </remarks>
    private static readonly byte[] SMSOMBCommunicationsProtocol = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Snell & Wilcox
    /// </summary>
    /// <remarks>
    /// Metadata registered by Snell & Wilcox for private use
    /// </remarks>
    private static readonly byte[] Snell_and_Wilcox = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Sony Corporation
    /// </summary>
    /// <remarks>
    /// Metadata registered by Sony Corporation for private use
    /// </remarks>
    private static readonly byte[] SonyCorporation = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Sound Descriptor
    /// </summary>
    /// <remarks>
    /// Sound Descriptor
    /// </remarks>
    private static readonly byte[] SoundDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x42, 0x00];
    /// <summary>
    /// Soundfield Group Label Sub-Descriptor
    /// </summary>
    /// <remarks>
    /// Soundfield Group Label Sub-Descriptor
    /// </remarks>
    private static readonly byte[] SoundfieldGroupLabelSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x6C, 0x00];
    /// <summary>
    /// Source Clip
    /// </summary>
    /// <remarks>
    /// Source Clip
    /// </remarks>
    private static readonly byte[] SourceClip = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x11, 0x00];
    /// <summary>
    /// Source Package
    /// </summary>
    /// <remarks>
    /// Source Package
    /// </remarks>
    private static readonly byte[] SourcePackage = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x37, 0x00];
    /// <summary>
    /// Source Reference
    /// </summary>
    /// <remarks>
    /// Source Reference
    /// </remarks>
    private static readonly byte[] SourceReference = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x10, 0x00];
    /// <summary>
    /// Spatial
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] spatial = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x14, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// SPATIO-TEMPORAL
    /// </summary>
    /// <remarks>
    /// Spatio-temporal metadata groups
    /// </remarks>
    private static readonly byte[] SPATIOTEMPORAL = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Standard Classes
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] StandardClasses = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00];
    /// <summary>
    /// Static Track
    /// </summary>
    /// <remarks>
    /// Static Track
    /// </remarks>
    private static readonly byte[] StaticTrack = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x3A, 0x00];
    /// <summary>
    /// Status Group
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] statusGroup = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x2D, 0x03, 0x00, 0x00, 0x00];
    /// <summary>
    /// Stereoscopic Picture Sub-Descriptor
    /// </summary>
    /// <remarks>
    /// Stereoscopic Picture Sub-Descriptor
    /// </remarks>
    private static readonly byte[] StereoscopicPictureSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x63, 0x00];
    /// <summary>
    /// STL Descriptor
    /// </summary>
    /// <remarks>
    /// STL Descriptor
    /// </remarks>
    private static readonly byte[] STLDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x70, 0x00];
    /// <summary>
    /// STL Sub-Descriptor
    /// </summary>
    /// <remarks>
    /// STL Sub-Descriptor
    /// </remarks>
    private static readonly byte[] STLSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x71, 0x00];
    /// <summary>
    /// Streaming Data
    /// </summary>
    /// <remarks>
    /// Defines a Data Stream Set
    /// </remarks>
    private static readonly byte[] StreamingData = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x05, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Sub-Descriptor
    /// </summary>
    /// <remarks>
    /// Sub-Descriptor
    /// </remarks>
    private static readonly byte[] SubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x59, 0x00];
    /// <summary>
    /// Subject
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] subject = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Subtitling
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] subtitling = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x37, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Supplemental Data Essence Descriptor
    /// </summary>
    /// <remarks>
    /// Defines a Supplemental Data Descriptor
    /// </remarks>
    private static readonly byte[] SupplementalDataEssenceDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x81, 0x0A];
    /// <summary>
    /// Tagged Value
    /// </summary>
    /// <remarks>
    /// Tagged Value
    /// </remarks>
    private static readonly byte[] TaggedValue = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x3F, 0x00];
    /// <summary>
    /// Tagged Value Definition
    /// </summary>
    /// <remarks>
    /// Tagged Value Definition
    /// </remarks>
    private static readonly byte[] TaggedValueDefinition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x4C, 0x00];
    /// <summary>
    /// Tape Descriptor
    /// </summary>
    /// <remarks>
    /// Tape Descriptor
    /// </remarks>
    private static readonly byte[] TapeDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x2E, 0x00];
    /// <summary>
    /// Target Audience
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] targetAudience = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Target Frame SubDescriptor
    /// </summary>
    /// <remarks>
    /// Target Frame SubDescriptor
    /// </remarks>
    private static readonly byte[] TargetFrameSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x7A, 0x00];
    /// <summary>
    /// Technical Attribute AnyURI
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] technicalAttributeAnyURI = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x3A, 0x0C, 0x00, 0x00, 0x00];
    /// <summary>
    /// Technical Attribute Boolean
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] technicalAttributeBoolean = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x3A, 0x0D, 0x00, 0x00, 0x00];
    /// <summary>
    /// Technical Attribute Float
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] technicalAttributeFloat = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x3A, 0x0A, 0x00, 0x00, 0x00];
    /// <summary>
    /// Technical Attribute Int16
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] technicalAttributeInt16 = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x3A, 0x03, 0x00, 0x00, 0x00];
    /// <summary>
    /// Technical Attribute Int32
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] technicalAttributeInt32 = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x3A, 0x04, 0x00, 0x00, 0x00];
    /// <summary>
    /// Technical Attribute Int64
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] technicalAttributeInt64 = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x3A, 0x05, 0x00, 0x00, 0x00];
    /// <summary>
    /// Technical Attribute Int8
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] technicalAttributeInt8 = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x3A, 0x02, 0x00, 0x00, 0x00];
    /// <summary>
    /// Technical Attribute Rational
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] technicalAttributeRational = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x3A, 0x0B, 0x00, 0x00, 0x00];
    /// <summary>
    /// Technical Attribute String
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] technicalAttributeString = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x3A, 0x01, 0x00, 0x00, 0x00];
    /// <summary>
    /// Technical Attribute UInt16
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] technicalAttributeUInt16 = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x3A, 0x07, 0x00, 0x00, 0x00];
    /// <summary>
    /// Technical Attribute UInt32
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] technicalAttributeUInt32 = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x3A, 0x08, 0x00, 0x00, 0x00];
    /// <summary>
    /// Technical Attribute UInt64
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] technicalAttributeUInt64 = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x3A, 0x09, 0x00, 0x00, 0x00];
    /// <summary>
    /// Technical Attribute UInt8
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] technicalAttributeUInt8 = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x3A, 0x06, 0x00, 0x00, 0x00];
    /// <summary>
    /// Temporal
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] temporal = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x17, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Text-based Descriptive Metadata Scheme
    /// </summary>
    /// <remarks>
    /// Text-based Descriptive Metadata Scheme
    /// </remarks>
    private static readonly byte[] TextBasedDescriptiveMetadataScheme = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x04, 0x00, 0x00, 0x00];
    /// <summary>
    /// Text-based Descriptive Metadata Sets
    /// </summary>
    /// <remarks>
    /// Text-based Descriptive Metadata Sets
    /// </remarks>
    private static readonly byte[] TextBasedDescriptiveMetadataSets = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x04, 0x02, 0x00, 0x00];
    /// <summary>
    /// Text-based Framework
    /// </summary>
    /// <remarks>
    /// Text-based Framework
    /// </remarks>
    private static readonly byte[] TextBasedFramework = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x04, 0x01, 0x01, 0x00];
    /// <summary>
    /// Text-based Frameworks
    /// </summary>
    /// <remarks>
    /// Text-based Frameworks
    /// </remarks>
    private static readonly byte[] TextBasedFrameworks = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x04, 0x01, 0x00, 0x00];
    /// <summary>
    /// Text-based Object
    /// </summary>
    /// <remarks>
    /// Text-based Object
    /// </remarks>
    private static readonly byte[] TextBasedObject = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x04, 0x03, 0x01, 0x00];
    /// <summary>
    /// Text-based Objects
    /// </summary>
    /// <remarks>
    /// Text-based Objects
    /// </remarks>
    private static readonly byte[] TextBasedObjects = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x04, 0x03, 0x00, 0x00];
    /// <summary>
    /// Text Clip
    /// </summary>
    /// <remarks>
    /// Text Clip
    /// </remarks>
    private static readonly byte[] TextClip = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x12, 0x00];
    /// <summary>
    /// TextLanguage
    /// </summary>
    /// <remarks>
    /// TextLanguage
    /// </remarks>
    private static readonly byte[] TextLanguage = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x7F, 0x11, 0x00];
    /// <summary>
    /// Text Locator
    /// </summary>
    /// <remarks>
    /// Text Locator
    /// </remarks>
    private static readonly byte[] TextLocator = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x33, 0x00];
    /// <summary>
    /// Textual Annotation
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] textualAnnotation = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x2E, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Thesaurus
    /// </summary>
    /// <remarks>
    /// Thesaurus
    /// </remarks>
    private static readonly byte[] Thesaurus = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x7F, 0x12, 0x00];
    /// <summary>
    /// 3ality Technica
    /// </summary>
    /// <remarks>
    /// Metadata registered by 3ality Technica for private use
    /// </remarks>
    private static readonly byte[] ThreealityTechnica = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// TIFF Descriptor
    /// </summary>
    /// <remarks>
    /// TIFF Descriptor
    /// </remarks>
    private static readonly byte[] TIFFDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x2B, 0x00];
    /// <summary>
    /// TIFF Picture Essence Descriptor
    /// </summary>
    /// <remarks>
    /// TIFF Picture Essence Descriptor
    /// </remarks>
    private static readonly byte[] TIFFPictureEssenceDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x69, 0x00];
    /// <summary>
    /// Time
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] time = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x58, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Timecode
    /// </summary>
    /// <remarks>
    /// Timecode
    /// </remarks>
    private static readonly byte[] Timecode = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x14, 0x00];
    /// <summary>
    /// Timecode Format
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] timecodeFormat = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x5A, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Timecode Stream
    /// </summary>
    /// <remarks>
    /// Timecode Stream
    /// </remarks>
    private static readonly byte[] TimecodeStream = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x15, 0x00];
    /// <summary>
    /// Timecode Stream 12M
    /// </summary>
    /// <remarks>
    /// Timecode Stream 12M
    /// </remarks>
    private static readonly byte[] TimecodeStream12M = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x16, 0x00];
    /// <summary>
    /// Timeline Track
    /// </summary>
    /// <remarks>
    /// Timeline Track
    /// </remarks>
    private static readonly byte[] TimelineTrack = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x3B, 0x00];
    /// <summary>
    /// Time Request
    /// </summary>
    /// <remarks>
    /// Time request
    /// </remarks>
    private static readonly byte[] TimeRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x02, 0x10, 0x00, 0x00, 0x00];
    /// <summary>
    /// Time Response
    /// </summary>
    /// <remarks>
    /// Time response
    /// </remarks>
    private static readonly byte[] TimeResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x02, 0x07, 0x01, 0x02, 0x11, 0x00, 0x00, 0x00];
    /// <summary>
    /// Title
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] title = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Titles Set
    /// </summary>
    /// <remarks>
    /// Titles Set
    /// </remarks>
    private static readonly byte[] Titles = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x01, 0x10, 0x01, 0x00];
    /// <summary>
    /// Track
    /// </summary>
    /// <remarks>
    /// Track
    /// Namespace: http://www.smpte-ra.org/reg/395/2014/13/1/aaf
    /// </remarks>
    private static readonly byte[] Track_aaf = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x38, 0x00];
    /// <summary>
    /// Track
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// Namespace: http://www.ebu.ch/metadata/schemas/ebucore/smpte/class13/group
    /// </remarks>
    private static readonly byte[] Track_group = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x34, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Transition
    /// </summary>
    /// <remarks>
    /// Transition
    /// </remarks>
    private static readonly byte[] Transition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x17, 0x00];
    /// <summary>
    /// Turner Broadcasting System, Inc.
    /// </summary>
    /// <remarks>
    /// Metadata registered by Turner Broadcasting System, Inc. for private use
    /// </remarks>
    private static readonly byte[] TurnerBroadcastingSystemInc = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0E, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Type
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] type = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Type Definition
    /// </summary>
    /// <remarks>
    /// Type Definition
    /// </remarks>
    private static readonly byte[] TypeDefinition = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x03, 0x00, 0x00];
    /// <summary>
    /// Type Definition Character
    /// </summary>
    /// <remarks>
    /// Type Definition Character
    /// </remarks>
    private static readonly byte[] TypeDefinitionCharacter = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x23, 0x00, 0x00];
    /// <summary>
    /// Type Definition Enumeration
    /// </summary>
    /// <remarks>
    /// Type Definition Enumeration
    /// </remarks>
    private static readonly byte[] TypeDefinitionEnumeration = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x07, 0x00, 0x00];
    /// <summary>
    /// Type Definition Extendible Enumeration
    /// </summary>
    /// <remarks>
    /// Type Definition Extendible Enumeration
    /// </remarks>
    private static readonly byte[] TypeDefinitionExtendibleEnumeration = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x20, 0x00, 0x00];
    /// <summary>
    /// Type Definition Fixed Array
    /// </summary>
    /// <remarks>
    /// Type Definition Fixed Array
    /// </remarks>
    private static readonly byte[] TypeDefinitionFixedArray = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x08, 0x00, 0x00];
    /// <summary>
    /// Type Definition Indirect
    /// </summary>
    /// <remarks>
    /// Type Definition Indirect
    /// </remarks>
    private static readonly byte[] TypeDefinitionIndirect = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x21, 0x00, 0x00];
    /// <summary>
    /// Type Definition Integer
    /// </summary>
    /// <remarks>
    /// Type Definition Integer
    /// </remarks>
    private static readonly byte[] TypeDefinitionInteger = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x04, 0x00, 0x00];
    /// <summary>
    /// Type Definition Opaque
    /// </summary>
    /// <remarks>
    /// Type Definition Opaque
    /// </remarks>
    private static readonly byte[] TypeDefinitionOpaque = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x22, 0x00, 0x00];
    /// <summary>
    /// Type Definition Record
    /// </summary>
    /// <remarks>
    /// Type Definition Record
    /// </remarks>
    private static readonly byte[] TypeDefinitionRecord = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x0D, 0x00, 0x00];
    /// <summary>
    /// Type Definition Rename
    /// </summary>
    /// <remarks>
    /// Type Definition Rename
    /// </remarks>
    private static readonly byte[] TypeDefinitionRename = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x0E, 0x00, 0x00];
    /// <summary>
    /// Type Definition Set
    /// </summary>
    /// <remarks>
    /// Type Definition Set
    /// </remarks>
    private static readonly byte[] TypeDefinitionSet = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x0A, 0x00, 0x00];
    /// <summary>
    /// Type Definition Stream
    /// </summary>
    /// <remarks>
    /// Type Definition Stream
    /// </remarks>
    private static readonly byte[] TypeDefinitionStream = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x0C, 0x00, 0x00];
    /// <summary>
    /// Type Definition String
    /// </summary>
    /// <remarks>
    /// Type Definition String
    /// </remarks>
    private static readonly byte[] TypeDefinitionString = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x0B, 0x00, 0x00];
    /// <summary>
    /// Type Definition Strong Object Reference
    /// </summary>
    /// <remarks>
    /// Type Definition Strong Object Reference
    /// </remarks>
    private static readonly byte[] TypeDefinitionStrongObjectReference = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x05, 0x00, 0x00];
    /// <summary>
    /// Type Definition Variable Array
    /// </summary>
    /// <remarks>
    /// Type Definition Variable Array
    /// </remarks>
    private static readonly byte[] TypeDefinitionVariableArray = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x09, 0x00, 0x00];
    /// <summary>
    /// Type Definition Weak Object Reference
    /// </summary>
    /// <remarks>
    /// Type Definition Weak Object Reference
    /// </remarks>
    private static readonly byte[] TypeDefinitionWeakObjectReference = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x02, 0x06, 0x00, 0x00];
    /// <summary>
    /// Type Group
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] typeGroup = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x2D, 0x01, 0x00, 0x00, 0x00];
    /// <summary>
    /// UserDefinedAcquisitionMetadata
    /// </summary>
    /// <remarks>
    /// UserDefinedAcquisitionMetadata
    /// </remarks>
    private static readonly byte[] UserDefinedAcquisitionMetadata = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x02, 0x01, 0x01, 0x7F, 0x01, 0x00, 0x00];
    /// <summary>
    /// UTF-16 Text-based Set
    /// </summary>
    /// <remarks>
    /// UTF-16 Text-based Set
    /// </remarks>
    private static readonly byte[] UTF16TextBasedSet = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x04, 0x02, 0x03, 0x00];
    /// <summary>
    /// UTF-8 Text-based Set
    /// </summary>
    /// <remarks>
    /// UTF-8 Text-based Set
    /// </remarks>
    private static readonly byte[] UTF8TextBasedSet = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x04, 0x01, 0x04, 0x02, 0x02, 0x00];
    /// <summary>
    /// Validate CPL Request
    /// </summary>
    /// <remarks>
    /// Validate CPL Request
    /// </remarks>
    private static readonly byte[] ValidateCPLRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x08, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Validate CPL Response
    /// </summary>
    /// <remarks>
    /// Validate CPL Response
    /// </remarks>
    private static readonly byte[] ValidateCPLResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x09, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Validate KDM Request
    /// </summary>
    /// <remarks>
    /// Validate KDM Request
    /// </remarks>
    private static readonly byte[] ValidateKDMRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x0C, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Validate KDM Response
    /// </summary>
    /// <remarks>
    /// Validate KDM Response
    /// </remarks>
    private static readonly byte[] ValidateKDMResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x0D, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Validate Playback Request
    /// </summary>
    /// <remarks>
    /// Validate Playback Request
    /// </remarks>
    private static readonly byte[] ValidatePlaybackRequest = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Validate Playback Response
    /// </summary>
    /// <remarks>
    /// Validate Playback Response
    /// </remarks>
    private static readonly byte[] ValidatePlaybackResponse = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0C, 0x03, 0x02, 0x11, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Varying Value
    /// </summary>
    /// <remarks>
    /// Varying Value
    /// </remarks>
    private static readonly byte[] VaryingValue = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x3E, 0x00];
    /// <summary>
    /// VBI Data Descriptor
    /// </summary>
    /// <remarks>
    /// VBI Data Descriptor
    /// </remarks>
    private static readonly byte[] VBIDataDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x5B, 0x00];
    /// <summary>
    /// VC-1 Video Descriptor
    /// </summary>
    /// <remarks>
    /// VC-1 Video Descriptor
    /// </remarks>
    private static readonly byte[] VC1VideoDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x5F, 0x00];
    /// <summary>
    /// VC-2 Sub-Descriptor
    /// </summary>
    /// <remarks>
    /// VC-2 Sub-Descriptor
    /// </remarks>
    private static readonly byte[] VC2SubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x74, 0x00];
    /// <summary>
    /// VC-5 Bayer Picture Essence Sub-Descriptor
    /// </summary>
    /// <remarks>
    /// Key Value for VC-5 Bayer Picture Essence Sub-Descriptor
    /// </remarks>
    private static readonly byte[] VC5BayerPictureEssenceSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x76, 0x00];
    /// <summary>
    /// VC-5 CDCI Picture Essence Sub-Descriptor
    /// </summary>
    /// <remarks>
    /// Key Value for the VC-5 CDCI Picture Essence Sub-Descriptor
    /// </remarks>
    private static readonly byte[] VC5CDCIPictureEssenceSubDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x77, 0x00];
    /// <summary>
    /// Version
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] version = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x1A, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Video Format
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] videoFormat = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x31, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// Video Noise Filter
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] videoNoiseFilter = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x5B, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// WAVE Descriptor
    /// </summary>
    /// <remarks>
    /// WAVE Descriptor
    /// </remarks>
    private static readonly byte[] WAVEDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x2C, 0x00];
    /// <summary>
    /// WAVE PCM Descriptor
    /// </summary>
    /// <remarks>
    /// WAVE PCM Descriptor
    /// </remarks>
    private static readonly byte[] WAVEPCMDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x48, 0x00];
    /// <summary>
    /// Width
    /// </summary>
    /// <remarks>
    /// No definition provided.
    /// </remarks>
    private static readonly byte[] width = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x02, 0x01, 0x42, 0x00, 0x00, 0x00, 0x00];
    /// <summary>
    /// XML Descriptor
    /// </summary>
    /// <remarks>
    /// XML Descriptor
    /// </remarks>
    private static readonly byte[] XMLDescriptor = [0x06, 0x0E, 0x2B, 0x34, 0x02, 0x7F, 0x01, 0x01, 0x0D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x54, 0x00];
}

